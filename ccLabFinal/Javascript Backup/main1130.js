//THREEJS RELATED VARIABLES 
function game(){
var scene,
  camera, fieldOfView, aspectRatio, nearPlane, farPlane,
  gobalLight, shadowLight, backLight,
  renderer,
  container,
  controls, 
  clock;
var delta = 0;
var floorRadius = 200;
var speed = 6;
var distance = 0;
var level = 1;
var levelInterval;
var levelUpdateFreq = 3000;
var initSpeed = 5;
var maxSpeed = 48;
var monsterPos = .65;
var monsterPosTarget = .65;
var floorRotation = 0;
var collisionObstacle = 10;
var collisionBonus = 20;
var gameStatus = "play";
var cameraPosGame = 160;
var cameraPosGameOver = 260;
var monsterAcceleration = 0.004;
var malusClearColor = 0xb44b39;
var malusClearAlpha = 0;
var audio = new Audio('https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/Antonio-Vivaldi-Summer_01.mp3');
    
var randomizer;
var potatoRotation;

var fieldGameOver, fieldDistance;

//SCREEN & MOUSE VARIABLES

var HEIGHT, WIDTH, windowHalfX, windowHalfY,
  mousePos = {
    x: 0,
    y: 0
  };

//3D OBJECTS VARIABLES

var hero;
    
var tomato;


// Materials
var blackMat = new THREE.MeshPhongMaterial({
    color: 0x100707,
    shading:THREE.FlatShading,
  });
  
var brownMat = new THREE.MeshPhongMaterial({
    color: 0xCCC09D,
    shininess:0,
    shading:THREE.FlatShading,
  });

var earMat = new THREE.MeshPhongMaterial({
    color: 0x3B2811,
    shininess:0,
    shading:THREE.FlatShading,
});

var greenMat = new THREE.MeshPhongMaterial({
    color: 0x7abf8e,
    shininess:0,
    shading:THREE.FlatShading,
  });

var ground = new THREE.MeshPhongMaterial({
    color: 0xffad33,
    shininess:0,
    shading:THREE.FlatShading,
  });
  
  var pinkMat = new THREE.MeshPhongMaterial({
    color: 0xdc5f45,//0xb43b29,//0xff5b49,
    shininess:0,
    shading:THREE.FlatShading,
  });
  
  var lightBrownMat = new THREE.MeshPhongMaterial({
    color: 0xe07a57,
    shading:THREE.FlatShading,
  });
  
  var whiteMat = new THREE.MeshPhongMaterial({
    color: 0xa49789, 
    shading:THREE.FlatShading,
  });
  var skinMat = new THREE.MeshPhongMaterial({
    color: 0xff9ea5,
    shading:THREE.FlatShading
  });
  var leaf = new THREE.MeshPhongMaterial({
    color: 0x55ed8a,
    shading:THREE.FlatShading
  });
  var tomato = new THREE.MeshPhongMaterial({
    color: 0xed8254,
    shading:THREE.FlatShading
  });
  var potato = new THREE.MeshPhongMaterial({
    color: 0x997132,
    shading:THREE.FlatShading
  })

// OTHER VARIABLES

var PI = Math.PI;

//INIT THREE JS, SCREEN AND MOUSE EVENTS

function initScreenAnd3D() {

  HEIGHT = window.innerHeight;
  WIDTH = window.innerWidth;
  windowHalfX = WIDTH / 2;
  windowHalfY = HEIGHT / 2;

  scene = new THREE.Scene();
  
  scene.fog = new THREE.Fog(0xd6eae6, 160,350);
  
  aspectRatio = WIDTH / HEIGHT;
  fieldOfView = 100;
  nearPlane = 1;
  farPlane = 2000;
  camera = new THREE.PerspectiveCamera(
    fieldOfView,
    aspectRatio,
    nearPlane,
    farPlane
  );
  camera.position.x = 0;
  camera.position.z = cameraPosGame;
  camera.position.y = 30;
  camera.lookAt(new THREE.Vector3(10, 10, 0));

  renderer = new THREE.WebGLRenderer({
    alpha: true,
    antialias: true
  });
  renderer.setPixelRatio(window.devicePixelRatio); 
  renderer.setClearColor( malusClearColor, malusClearAlpha);
  
  renderer.setSize(WIDTH, HEIGHT);
  renderer.shadowMap.enabled = true;

  container = document.getElementById('world');
  container.appendChild(renderer.domElement);

  window.addEventListener('resize', handleWindowResize, false);
  document.addEventListener('mousedown', handleMouseDown, false);
  document.addEventListener("touchend", handleMouseDown, false);

  
  clock = new THREE.Clock();

}

function handleWindowResize() {
  HEIGHT = window.innerHeight;
  WIDTH = window.innerWidth;
  windowHalfX = WIDTH / 2;
  windowHalfY = HEIGHT / 2;
  renderer.setSize(WIDTH, HEIGHT);
  camera.aspect = WIDTH / HEIGHT;
  camera.updateProjectionMatrix();
}


function handleMouseDown(event){
  if (gameStatus == "play") hero.jump();
  else if (gameStatus == "readyToReplay"){
    replay();
  }
}

function createLights() {
  globalLight = new THREE.AmbientLight(0xffffff, .9);

  shadowLight = new THREE.DirectionalLight(0xffffff, 1);
  shadowLight.position.set(-30, 40, 20);
  shadowLight.castShadow = true;
  shadowLight.shadow.camera.left = -400;
  shadowLight.shadow.camera.right = 400;
  shadowLight.shadow.camera.top = 400;
  shadowLight.shadow.camera.bottom = -400;
  shadowLight.shadow.camera.near = 1;
  shadowLight.shadow.camera.far = 2000;
  shadowLight.shadow.mapSize.width = shadowLight.shadow.mapSize.height = 2048;

  scene.add(globalLight);
  scene.add(shadowLight);
  
}

function createFloor() {
  
  floorShadow = new THREE.Mesh(new THREE.SphereGeometry(floorRadius, 50, 50), new THREE.MeshPhongMaterial({
    color: 0x7abf8e,
    specular:0x000000,
    shininess:1,
    transparent:true,
    opacity:.5
  }));
  //floorShadow.rotation.x = -Math.PI / 2;
  floorShadow.receiveShadow = true;
  
  floorGrass = new THREE.Mesh(new THREE.SphereGeometry(floorRadius-.5, 50, 50), new THREE.MeshBasicMaterial({
    color: 0xff6600
  }));
  //floor.rotation.x = -Math.PI / 2;
  floorGrass.receiveShadow = false;
  
  floor = new THREE.Group();
  floor.position.y = -floorRadius;
  
  floor.add(floorShadow);
  floor.add(floorGrass);
  scene.add(floor);
  
}

Hero = function() {
  this.status = "running";
  this.runningCycle = 0;
  this.mesh = new THREE.Group();
  this.body = new THREE.Group();
  this.mesh.add(this.body);
  
  var torsoGeom = new THREE.CubeGeometry(10, 8, 13, 1);
  
  this.torso = new THREE.Mesh(torsoGeom, brownMat);
  this.torso.position.z = 0;
  this.torso.position.y = 7;
  this.torso.castShadow = true;
  this.body.add(this.torso);
  
  var pantsGeom = new THREE.CubeGeometry(9, 9, 5, 1);
  this.pants = new THREE.Mesh(pantsGeom, whiteMat);
  this.pants.position.z = -3;
  this.pants.position.y = 0;
  this.pants.castShadow = true;
  this.torso.add(this.pants);
  
  
  this.torso.rotation.x = -Math.PI/8;
  
  var headGeom = new THREE.CubeGeometry(6, 6, 8, 1);
  
  headGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0,0,7.5));
  this.head = new THREE.Mesh(headGeom, brownMat);
  this.head.position.z = 2;
  this.head.position.y = 11;
  this.head.castShadow = true;
  this.body.add(this.head);
  
  
  var pawFGeom = new THREE.CubeGeometry(2,5,2, 1);
  this.pawFR = new THREE.Mesh(pawFGeom, earMat);
  this.pawFR.position.x = -2;
  this.pawFR.position.z = 6;
  this.pawFR.position.y = 1.5;
  this.pawFR.castShadow = true;
  this.body.add(this.pawFR);
  
  this.pawFL = this.pawFR.clone();
  this.pawFL.position.x = - this.pawFR.position.x;
  this.pawFL.castShadow = true;
  this.body.add(this.pawFL);
  
  //var pawBGeom = new THREE.CubeGeometry(3,3,6, 1);
  this.pawBL = this.pawFL.clone();
  this.pawBL.position.y = 1.5;
  this.pawBL.position.z = -5;
  this.pawBL.position.x = 5;
  this.pawBL.castShadow = true;
  this.body.add(this.pawBL);
  
  this.pawBR = this.pawBL.clone();
  this.pawBR.position.x = - this.pawBL.position.x;
  this.pawBR.castShadow = true;
  this.body.add(this.pawBR);
  
  var earGeom = new THREE.CubeGeometry(1, 2, 2, 1);
  
  earGeom.vertices[4].z-=1;
  earGeom.vertices[4].y-=1;
  earGeom.vertices[1].z-=1;
  earGeom.vertices[1].y-=1;
  earGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0,9,0));
  
  this.earL = new THREE.Mesh(earGeom, earMat);
  this.earL.position.x = 3;
  this.earL.position.z = 4.5;
  this.earL.position.y = -7;
 // this.earL.rotation.z = -Math.PI/12;
  this.earL.castShadow = true;
  this.head.add(this.earL);
  
  this.earR = this.earL.clone();
  this.earR.position.x = -this.earL.position.x;
  this.earR.rotation.z = -this.earL.rotation.z;
  this.earR.castShadow = true;
  this.head.add(this.earR);
  
  var eyeGeom = new THREE.CubeGeometry(1,3,3);
  
  this.eyeL = new THREE.Mesh(eyeGeom, whiteMat);
  this.eyeL.position.x = 4;
  this.eyeL.position.z = 9;
  this.eyeL.position.y = 1.5;
  this.eyeL.castShadow = true;
  this.head.add(this.eyeL);
  
  var irisGeom = new THREE.CubeGeometry(.6,1,1);
  
  this.iris = new THREE.Mesh(irisGeom, blackMat);
  this.iris.position.x = 0.8;
  this.iris.position.y = 0.5;
  this.iris.position.z = 0.5;
  this.eyeL.add(this.iris);
  
  this.eyeR = this.eyeL.clone();
  this.eyeR.children[0].position.x = -this.iris.position.x;
  
  
  this.eyeR.position.x = -this.eyeL.position.x;
  this.head.add(this.eyeR);

  this.body.traverse(function(object) {
    if (object instanceof THREE.Mesh) {
      object.castShadow = true;
      object.receiveShadow = true;
    }
  });
}

BonusParticles = function(){
  this.mesh = new THREE.Group();
  var bigParticleGeom = new THREE.CubeGeometry(10,10,10,1);
  var smallParticleGeom = new THREE.CubeGeometry(5,5,5,1);
  this.parts = [];
  for (var i=0; i<10; i++){
    var partPink = new THREE.Mesh(bigParticleGeom, pinkMat);
    var partGreen = new THREE.Mesh(smallParticleGeom, greenMat);
    partGreen.scale.set(.5,.5,.5);
    this.parts.push(partPink);
    this.parts.push(partGreen);
    this.mesh.add(partPink);
    this.mesh.add(partGreen);
  }
}

BonusParticles.prototype.explose = function(){
  var _this = this;
  var explosionSpeed = .5;
  for(var i=0; i<this.parts.length; i++){
    var tx = -50 + Math.random()*100;
    var ty = -50 + Math.random()*100;
    var tz = -50 + Math.random()*100;
    var p = this.parts[i];
    p.position.set(0,0,0);
    p.scale.set(1,1,1);
    p.visible = true;
    var s = explosionSpeed + Math.random()*.5;
    TweenMax.to(p.position, s,{x:tx, y:ty, z:tz, ease:Power4.easeOut});
    TweenMax.to(p.scale, s,{x:.01, y:.01, z:.01, ease:Power4.easeOut, onComplete:removeParticle, onCompleteParams:[p]});
  }
}

DisappearMagic = function(){
    this.mesh = new THREE.Group();
    var cube = new THREE.CubeGeometry(1,1,1,1);
    var disappear = new THREE.Mesh(cube,pinkMat);
    this.mesh.add(disappear);
}


function removeParticle(p){
  p.visible = false;
}

Hero.prototype.run = function(){
  this.status = "running";
  
  var s = Math.min(speed,maxSpeed);
  
  this.runningCycle += delta * s * .7;
  this.runningCycle = this.runningCycle % (Math.PI*2);
  var t = this.runningCycle;
  
  var amp = 4;
  var disp = .2;
  
  // BODY
  
  this.body.position.y = 6+ Math.sin(t - Math.PI/2)*amp;
  this.body.rotation.x = .2 + Math.sin(t - Math.PI/2)*amp*.1;
  
  this.torso.rotation.x =  Math.sin(t - Math.PI/2)*amp*.1;
  this.torso.position.y =  7 + Math.sin(t - Math.PI/2)*amp*.5;
  
  
//  // HEAD
//  this.head.position.z = 2 + Math.sin(t - Math.PI/2)*amp*.5;
//  this.head.position.y = 8 + Math.cos(t - Math.PI/2)*amp*.7;
//  this.head.rotation.x = -.2 + Math.sin(t + Math.PI)*amp*.1;
  
//  // EARS
//  this.earL.rotation.x = Math.cos(-Math.PI/2 + t)*(amp*.2);
//  this.earR.rotation.x = Math.cos(-Math.PI/2 + .2 + t)*(amp*.3);
  
//  // EYES
//  this.eyeR.scale.y = this.eyeL.scale.y = .7 +  Math.abs(Math.cos(-Math.PI/4 + t*.5))*.6;
  
  
  // FRONT RIGHT PAW
 // this.pawFR.position.y = 1.5 + Math.sin(t)*amp;
  this.pawFR.rotation.x = Math.cos(t ) * Math.PI/4;
  
  
  this.pawFR.position.z = 6 - Math.cos(t)*amp*2;
  
  // FRONT LEFT PAW
  
 // this.pawFL.position.y = 1.5 + Math.sin(disp + t)*amp;
  this.pawFL.rotation.x = Math.cos( t ) * Math.PI/4;
  
  
 // this.pawFL.position.z = 6 - Math.cos(disp+t)*amp*2;
  
  // BACK RIGHT PAW
 // this.pawBR.position.y = 1.5 + Math.sin(Math.PI + t)*amp;
  this.pawBR.rotation.x = Math.cos(t + Math.PI*1.5) * Math.PI/3;
  
  
 // this.pawBR.position.z = - Math.cos(Math.PI + t)*amp;
  
  // BACK LEFT PAW
  //this.pawBL.position.y = 1.5 + Math.sin(Math.PI + t)*amp;
  this.pawBL.rotation.x = Math.cos(t + Math.PI *1.5) * Math.PI/3;
  
  
 // this.pawBL.position.z = - Math.cos(Math.PI + t)*amp;
  
  
}

Hero.prototype.jump = function(){
  if (this.status == "jumping") return;
  this.status = "jumping";
  var _this = this;
  var totalSpeed = 10 / speed;
  var jumpHeight = 45;
  
 // TweenMax.to(this.earL.rotation, totalSpeed, {x:"+=.3", ease:Back.easeOut});
//  TweenMax.to(this.earR.rotation, totalSpeed, {x:"-=.3", ease:Back.easeOut});
  
  TweenMax.to(this.pawFL.rotation, totalSpeed, {x:"+=.7", ease:Back.easeOut});
  TweenMax.to(this.pawFR.rotation, totalSpeed, {x:"-=.7", ease:Back.easeOut});
  TweenMax.to(this.pawBL.rotation, totalSpeed, {x:"+=.7", ease:Back.easeOut});
  TweenMax.to(this.pawBR.rotation, totalSpeed, {x:"-=.7", ease:Back.easeOut});
  
//  
//  TweenMax.to(this.mouth.rotation, totalSpeed, {x:.5, ease:Back.easeOut});
  
  TweenMax.to(this.mesh.position, totalSpeed/2, {y:jumpHeight, ease:Power2.easeOut});
  TweenMax.to(this.mesh.position, totalSpeed/2, {y:0, ease:Power4.easeIn, delay:totalSpeed/2, onComplete: function(){
    //t = 0;
    _this.status="running";
  }});
  
}

Hero.prototype.nod = function(){
  var _this = this;
  var sp = .5 + Math.random();
  
  // HEAD
  var tHeadRotY = -Math.PI/6 + Math.random()* Math.PI/3;
  TweenMax.to(this.head.rotation, sp, {y:tHeadRotY, ease:Power4.easeInOut, onComplete:function(){_this.nod()}});
  
//  // EARS
//  var tEarLRotX =  Math.PI/4 + Math.random()* Math.PI/6;
//  var tEarRRotX =  Math.PI/4 + Math.random()* Math.PI/6;
//  
//  TweenMax.to(this.earL.rotation, sp, {x:tEarLRotX, ease:Power4.easeInOut});
//  TweenMax.to(this.earR.rotation, sp, {x:tEarRRotX, ease:Power4.easeInOut});
  
  
  // PAWS BACK LEFT
  
  var tPawBLRot = Math.random()*Math.PI/2;
  var tPawBLY = -4 + Math.random()*8;
  
  TweenMax.to(this.pawBL.rotation, sp/2, {x:tPawBLRot, ease:Power1.easeInOut, yoyo:true, repeat:2});
  //TweenMax.to(this.pawBL.position, sp/2, {y:tPawBLY, ease:Power1.easeInOut, yoyo:true, repeat:2});
  
  
  // PAWS BACK RIGHT
  
  var tPawBRRot = Math.random()*Math.PI/2;
  var tPawBRY = -4 + Math.random()*8;
  TweenMax.to(this.pawBR.rotation, sp/2, {x:tPawBRRot, ease:Power1.easeInOut, yoyo:true, repeat:2});
 // TweenMax.to(this.pawBR.position, sp/2, {y:tPawBRY, ease:Power1.easeInOut, yoyo:true, repeat:2});
  
  // PAWS FRONT LEFT
  
  var tPawFLRot = Math.random()*Math.PI/2;
  var tPawFLY = -4 + Math.random()*8;
  
  TweenMax.to(this.pawFL.rotation, sp/2, {x:tPawFLRot, ease:Power1.easeInOut, yoyo:true, repeat:2});
  
  //TweenMax.to(this.pawFL.position, sp/2, {y:tPawFLY, ease:Power1.easeInOut, yoyo:true, repeat:2});
  
  // PAWS FRONT RIGHT
  
  var tPawFRRot = Math.random()*Math.PI/2;
  var tPawFRY = -4 + Math.random()*8;
  
  TweenMax.to(this.pawFR.rotation, sp/2, {x:tPawFRRot, ease:Power1.easeInOut, yoyo:true, repeat:2});
  
  //TweenMax.to(this.pawFR.position, sp/2, {y:tPawFRY, ease:Power1.easeInOut, yoyo:true, repeat:2});
  
  // MOUTH
//  var tMouthRot = Math.random()*Math.PI/8;
//  TweenMax.to(this.mouth.rotation, sp, {x:tMouthRot, ease:Power1.easeInOut});
//  // IRIS
//  var tIrisY = -1 + Math.random()*2;
//  var tIrisZ = -1 + Math.random()*2;
//  var iris1 = this.iris;
//  var iris2 = this.eyeR.children[0];
//  TweenMax.to([iris1.position, iris2.position], sp, {y:tIrisY, z:tIrisZ, ease:Power1.easeInOut});
  
  //EYES
  if (Math.random()>.2) TweenMax.to([this.eyeR.scale, this.eyeL.scale], sp/8, {y:0, ease:Power1.easeInOut, yoyo:true, repeat:1});
  
}

Hero.prototype.hang = function(){
  var _this = this;
  var sp = 1;
  var ease = Power4.easeOut;
  
  TweenMax.killTweensOf(this.eyeL.scale);
  TweenMax.killTweensOf(this.eyeR.scale);
  
  this.body.rotation.x = 0;
  this.torso.rotation.x = 0;
  this.body.position.y = 0;
  this.torso.position.y = 7;
  
  TweenMax.to(this.mesh.rotation, sp, {y:0, ease:ease});
  TweenMax.to(this.mesh.position, sp, {y:-7, z:6, ease:ease});
  TweenMax.to(this.head.rotation, sp, {x:Math.PI/6, ease:ease, onComplete:function(){_this.nod();}});
  
  TweenMax.to(this.earL.rotation, sp, {x:Math.PI/3, ease:ease});
  TweenMax.to(this.earR.rotation, sp, {x:Math.PI/3, ease:ease});
  
  TweenMax.to(this.pawFL.position, sp, {y:-1, z:3, ease:ease});
  TweenMax.to(this.pawFR.position, sp, {y:-1, z:3, ease:ease});
  TweenMax.to(this.pawBL.position, sp, {y:-2, z:-3, ease:ease});
  TweenMax.to(this.pawBR.position, sp, {y:-2, z:-3, ease:ease});
  
  TweenMax.to(this.eyeL.scale, sp, {y:1, ease:ease});
  TweenMax.to(this.eyeR.scale, sp, {y:1, ease:ease});
}

Carrot = function() {
  this.angle = 0;
  this.mesh = new THREE.Group();
  
  var bodyGeom = new THREE.CylinderGeometry(5,3, 10, 4,1);
  bodyGeom.vertices[8].y+=2;
  bodyGeom.vertices[9].y-=3;
  
  this.body = new THREE.Mesh(bodyGeom, pinkMat);
  
  var leafGeom = new THREE.CubeGeometry(5,10,1,1);
  leafGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0,5,0));
  leafGeom.vertices[2].x-=1;
  leafGeom.vertices[3].x-=1;
  leafGeom.vertices[6].x+=1;
  leafGeom.vertices[7].x+=1;
  
  this.leaf1 = new THREE.Mesh(leafGeom,greenMat);
  this.leaf1.position.y = 7;
  this.leaf1.rotation.z = .3;
  this.leaf1.rotation.x = .2;
  
  this.leaf2 = this.leaf1.clone();
  this.leaf2.scale.set(1,1.3,1);
  this.leaf2.position.y = 7;
  this.leaf2.rotation.z = -.3;
  this.leaf2.rotation.x = -.2;
  
  this.mesh.add(this.body);
  this.mesh.add(this.leaf1);
  this.mesh.add(this.leaf2);

  this.body.traverse(function(object) {
    if (object instanceof THREE.Mesh) {
      object.castShadow = true;
      object.receiveShadow = true;
    }
  });
}

Tomato = function() {
  this.angle = 0;
  this.mesh = new THREE.Group();
  
  var mainGeom = new THREE.BufferGeometry();
  var vertices = new Float32Array( [-0.027809,2.437612,0,-0.454424,2.639568,0,-0.428204,2.639568,0.141726,-0.027809,2.437612,0,0.372644,2.639568,-0.142871,0.29887,2.639568,-0.268888,1.487121,1.364587,-1.246933,1.82924,1.364587,-0.662545,1.416077,0.918765,-1.188457,-1.016014,1.364587,-1.679794,-0.371036,1.364587,-1.909746,-0.969671,0.918765,-1.601019,-0.48857,0.046802,-0.783222,-0.187842,0.046802,-0.890439,-0.272969,0.018322,-0.416733,-0.893553,0.046802,-0.306443,-0.733771,0.046802,-0.581257,-0.48845,0.018322,-0.163051,-0.518616,0.018322,0,-0.950246,0.046802,0,-0.893553,0.046802,-0.306443,-0.006218,0.013015,0,-0.518616,0.018322,0,-0.48845,0.018322,-0.163051,-0.007545,0.013015,0.007173,-0.48845,0.018322,-0.163051,-0.403434,0.018322,-0.309273,-0.733771,0.046802,-0.581257,-0.48857,0.046802,-0.783222,-0.403434,0.018322,-0.309273,-0.011285,0.013015,0.013605,-0.403434,0.018322,-0.309273,-0.272969,0.018322,-0.416733,-0.017024,0.013015,0.018332,-0.272969,0.018322,-0.416733,-0.112959,0.018322,-0.473781,-1.884591,1.364587,-0.657235,-1.541904,1.364587,-1.246637,-1.797516,0.918765,-0.626413,-1.614126,0.501517,-0.561499,-1.321355,0.501517,-1.065047,-1.307189,0.182362,-0.452855,-1.390969,0.182362,0,-1.718005,0.501517,0,-1.614126,0.501517,-0.561499,-0.950246,0.046802,0,-1.390969,0.182362,0,-1.307189,0.182362,-0.452855,-0.893553,0.046802,-0.306443,-1.307189,0.182362,-0.452855,-1.071067,0.182362,-0.858971,-1.913405,0.918765,0,-2.006183,1.364587,0,-1.884591,1.364587,-0.657235,-1.718005,0.501517,0,-1.913405,0.918765,0,-1.797516,0.918765,-0.626413,-1.614126,0.501517,-0.561499,-1.797516,0.918765,-0.626413,-1.470899,0.918765,-1.188175,-0.708713,0.182362,-1.15743,-0.872068,0.501517,-1.435109,-0.32104,0.501517,-1.631566,-1.071067,0.182362,-0.858971,-1.321355,0.501517,-1.065047,-0.872068,0.501517,-1.435109,-0.733771,0.046802,-0.581257,-1.071067,0.182362,-0.858971,-0.708713,0.182362,-1.15743,-0.48857,0.046802,-0.783222,-0.708713,0.182362,-1.15743,-0.264303,0.182362,-1.315874,-1.541904,1.364587,-1.246637,-1.016014,1.364587,-1.679794,-1.470899,0.918765,-1.188175,-1.321355,0.501517,-1.065047,-1.470899,0.918765,-1.188175,-0.969671,0.918765,-1.601019,-0.872068,0.501517,-1.435109,-0.969671,0.918765,-1.601019,-0.35494,0.918765,-1.820187,0.348024,0.018322,-0.309347,0.678543,0.046802,-0.581396,0.838059,0.046802,-0.308918,0.057155,0.018322,-0.473546,0.131875,0.046802,-0.889998,0.433024,0.046802,-0.782299,-0.112959,0.018322,-0.473781,-0.187842,0.046802,-0.890439,0.131875,0.046802,-0.889998,-0.024063,0.013015,0.020842,-0.112959,0.018322,-0.473781,0.057155,0.018322,-0.473546,-0.031546,0.013015,0.020832,0.057155,0.018322,-0.473546,0.217389,0.018322,-0.416242,0.217389,0.018322,-0.416242,0.433024,0.046802,-0.782299,0.678543,0.046802,-0.581396,-0.038595,0.013015,0.018311,0.217389,0.018322,-0.416242,0.348024,0.018322,-0.309347,-0.044342,0.013015,0.013608,0.348024,0.018322,-0.309347,0.432899,0.018322,-0.164368,0.314669,1.364587,-1.9088,0.960551,1.364587,-1.677815,0.298608,0.918765,-1.819285,0.208169,0.182362,-1.315222,0.264782,0.501517,-1.630757,0.816583,0.501517,-1.433418,-0.264303,0.182362,-1.315874,-0.32104,0.501517,-1.631566,0.264782,0.501517,-1.630757,-0.187842,0.046802,-0.890439,-0.264303,0.182362,-1.315874,0.208169,0.182362,-1.315222,0.131875,0.046802,-0.889998,0.208169,0.182362,-1.315222,0.653202,0.182362,-1.156066,-0.371036,1.364587,-1.909746,0.314669,1.364587,-1.9088,-0.35494,0.918765,-1.820187,-0.32104,0.501517,-1.631566,-0.35494,0.918765,-1.820187,0.298608,0.918765,-1.819285,0.264782,0.501517,-1.630757,0.298608,0.918765,-1.819285,0.914201,0.918765,-1.599132,1.016024,0.182362,-0.859175,1.266451,0.501517,-1.0653,1.558735,0.501517,-0.566036,0.653202,0.182362,-1.156066,0.816583,0.501517,-1.433418,1.266451,0.501517,-1.0653,0.433024,0.046802,-0.782299,0.653202,0.182362,-1.156066,1.016024,0.182362,-0.859175,0.678543,0.046802,-0.581396,1.016024,0.182362,-0.859175,1.251755,0.182362,-0.456514,0.960551,1.364587,-1.677815,1.487121,1.364587,-1.246933,0.914201,0.918765,-1.599132,0.816583,0.501517,-1.433418,0.914201,0.918765,-1.599132,1.416077,0.918765,-1.188457,1.266451,0.501517,-1.0653,1.416077,0.918765,-1.188457,1.742152,0.918765,-0.631474,-0.027809,2.437612,0,-0.101822,2.639568,-0.411817,-0.240905,2.639568,-0.36223,-0.874036,2.18124,-1.438453,-0.321724,2.18124,-1.635368,-0.988275,1.867262,-1.632643,-1.617822,2.18124,-0.562808,-1.324369,2.18124,-1.067529,-1.832472,1.867262,-0.638786,-1.95065,1.867262,0,-1.721944,2.18124,0,-1.617822,2.18124,-0.562808,-2.006183,1.364587,0,-1.95065,1.867262,0,-1.832472,1.867262,-0.638786,-1.884591,1.364587,-0.657235,-1.832472,1.867262,-0.638786,-1.499403,1.867262,-1.211644,-1.324369,2.18124,-1.067529,-0.874036,2.18124,-1.438453,-1.499403,1.867262,-1.211644,-1.541904,1.364587,-1.246637,-1.499403,1.867262,-1.211644,-0.988275,1.867262,-1.632643,-1.016014,1.364587,-1.679794,-0.988275,1.867262,-1.632643,-0.361402,1.867262,-1.85614,-0.027809,2.437612,0,-0.354307,2.639568,-0.268824,-0.428204,2.639568,-0.141726,-0.856742,2.629518,-0.293413,-0.703754,2.629518,-0.556543,-1.239003,2.450212,-0.428719,-1.318318,2.450212,0,-0.911025,2.629518,0,-0.856742,2.629518,-0.293413,-1.721944,2.18124,0,-1.318318,2.450212,0,-1.239003,2.450212,-0.428719,-1.617822,2.18124,-0.562808,-1.239003,2.450212,-0.428719,-1.015465,2.450212,-0.813191,-0.454424,2.639568,0,-0.027809,2.437612,0,-0.428204,2.639568,-0.141726,-0.911025,2.629518,0,-0.454424,2.639568,0,-0.428204,2.639568,-0.141726,-0.856742,2.629518,-0.293413,-0.428204,2.639568,-0.141726,-0.354307,2.639568,-0.268824,-0.672423,2.450212,-1.095743,-0.468979,2.629518,-0.74992,-0.181038,2.629518,-0.852578,-1.015465,2.450212,-0.813191,-0.703754,2.629518,-0.556543,-0.468979,2.629518,-0.74992,-1.324369,2.18124,-1.067529,-1.015465,2.450212,-0.813191,-0.672423,2.450212,-1.095743,-0.874036,2.18124,-1.438453,-0.672423,2.450212,-1.095743,-0.251699,2.450212,-1.245743,-0.027809,2.437612,0,-0.240905,2.639568,-0.36223,-0.354307,2.639568,-0.268824,-0.703754,2.629518,-0.556543,-0.354307,2.639568,-0.268824,-0.240905,2.639568,-0.36223,-0.468979,2.629518,-0.74992,-0.240905,2.639568,-0.36223,-0.101822,2.639568,-0.411817,1.444597,1.867262,-1.211932,1.269467,2.18124,-1.067783,1.562432,2.18124,-0.567355,0.305055,1.867262,-1.85522,0.265464,2.18124,-1.634557,0.818551,2.18124,-1.436759,-0.361402,1.867262,-1.85614,-0.321724,2.18124,-1.635368,0.265464,2.18124,-1.634557,-0.371036,1.364587,-1.909746,-0.361402,1.867262,-1.85614,0.305055,1.867262,-1.85522,0.314669,1.364587,-1.9088,0.305055,1.867262,-1.85522,0.932808,1.867262,-1.630719,0.932808,1.867262,-1.630719,0.818551,2.18124,-1.436759,1.269467,2.18124,-1.067783,0.960551,1.364587,-1.677815,0.932808,1.867262,-1.630719,1.444597,1.867262,-1.211932,1.487121,1.364587,-1.246933,1.444597,1.867262,-1.211932,1.777113,1.867262,-0.643947,-0.027809,2.437612,0,0.185321,2.639568,-0.361803,0.046043,2.639568,-0.411613,0.195592,2.450212,-1.245125,0.125085,2.629518,-0.852156,0.41343,2.629518,-0.749036,-0.251699,2.450212,-1.245743,-0.181038,2.629518,-0.852578,0.125085,2.629518,-0.852156,-0.321724,2.18124,-1.635368,-0.251699,2.450212,-1.245743,0.195592,2.450212,-1.245125,0.265464,2.18124,-1.634557,0.195592,2.450212,-1.245125,0.616906,2.450212,-1.094452,-0.027809,2.437612,0,0.046043,2.639568,-0.411613,-0.101822,2.639568,-0.411817,-0.181038,2.629518,-0.852578,-0.101822,2.639568,-0.411817,0.046043,2.639568,-0.411613,0.125085,2.629518,-0.852156,0.046043,2.639568,-0.411613,0.185321,2.639568,-0.361803,0.960392,2.450212,-0.813384,0.648509,2.629518,-0.556675,0.801243,2.629518,-0.295783,0.616906,2.450212,-1.094452,0.41343,2.629518,-0.749036,0.648509,2.629518,-0.556675,0.818551,2.18124,-1.436759,0.616906,2.450212,-1.094452,0.960392,2.450212,-0.813384,1.269467,2.18124,-1.067783,0.960392,2.450212,-0.813384,1.183559,2.450212,-0.432183,-0.027809,2.437612,0,0.29887,2.639568,-0.268888,0.185321,2.639568,-0.361803,0.41343,2.629518,-0.749036,0.185321,2.639568,-0.361803,0.29887,2.639568,-0.268888,0.648509,2.629518,-0.556675,0.29887,2.639568,-0.268888,0.372644,2.639568,-0.142871,-1.797516,0.918765,0.626413,-1.884591,1.364587,0.657235,-2.006183,1.364587,0,1.487121,1.364587,1.246933,0.960551,1.364587,1.677815,1.416077,0.918765,1.188457,0.348024,0.018322,0.309347,0.678543,0.046802,0.581396,0.433024,0.046802,0.782299,0.462998,0.018322,0,0.894628,0.046802,0,0.838059,0.046802,0.308918,0.432899,0.018322,-0.164368,0.838059,0.046802,-0.308918,0.894628,0.046802,0,-0.048076,0.013015,0.007231,0.432899,0.018322,-0.164368,0.462998,0.018322,0,-0.0494,0.013015,0,0.462998,0.018322,0,0.432899,0.018322,0.164368,0.432899,0.018322,0.164368,0.838059,0.046802,0.308918,0.678543,0.046802,0.581396,-0.048076,0.013015,-0.007231,0.432899,0.018322,0.164368,0.348024,0.018322,0.309347,-0.044342,0.013015,-0.013608,0.348024,0.018322,0.309347,0.217389,0.018322,0.416242,1.950565,1.364587,0,1.82924,1.364587,0.662545,1.857787,0.918765,0,1.662388,0.501517,0,1.558735,0.501517,0.566036,1.335352,0.182362,0,1.251755,0.182362,-0.456514,1.558735,0.501517,-0.566036,1.662388,0.501517,0,0.838059,0.046802,-0.308918,1.251755,0.182362,-0.456514,1.335352,0.182362,0,0.894628,0.046802,0,1.335352,0.182362,0,1.251755,0.182362,0.456514,1.742152,0.918765,-0.631474,1.82924,1.364587,-0.662545,1.950565,1.364587,0,1.558735,0.501517,-0.566036,1.742152,0.918765,-0.631474,1.857787,0.918765,0,1.662388,0.501517,0,1.857787,0.918765,0,1.742152,0.918765,0.631474,1.016024,0.182362,0.859175,1.266451,0.501517,1.0653,0.816583,0.501517,1.433418,1.251755,0.182362,0.456514,1.558735,0.501517,0.566036,1.266451,0.501517,1.0653,0.838059,0.046802,0.308918,1.251755,0.182362,0.456514,1.016024,0.182362,0.859175,0.678543,0.046802,0.581396,1.016024,0.182362,0.859175,0.653202,0.182362,1.156066,1.82924,1.364587,0.662545,1.487121,1.364587,1.246933,1.742152,0.918765,0.631474,1.558735,0.501517,0.566036,1.742152,0.918765,0.631474,1.416077,0.918765,1.188457,1.266451,0.501517,1.0653,1.416077,0.918765,1.188457,0.914201,0.918765,1.599132,0.314669,1.364587,1.9088,-0.371036,1.364587,1.909746,0.298608,0.918765,1.819285,0.057155,0.018322,0.473546,0.131875,0.046802,0.889998,-0.187842,0.046802,0.890439,0.217389,0.018322,0.416242,0.433024,0.046802,0.782299,0.131875,0.046802,0.889998,-0.038595,0.013015,-0.018311,0.217389,0.018322,0.416242,0.057155,0.018322,0.473546,-0.031546,0.013015,-0.020832,0.057155,0.018322,0.473546,-0.112959,0.018322,0.473781,0.264782,0.501517,1.630757,-0.32104,0.501517,1.631566,0.208169,0.182362,1.315222,0.653202,0.182362,1.156066,0.816583,0.501517,1.433418,0.264782,0.501517,1.630757,0.433024,0.046802,0.782299,0.653202,0.182362,1.156066,0.208169,0.182362,1.315222,0.131875,0.046802,0.889998,0.208169,0.182362,1.315222,-0.264303,0.182362,1.315874,0.914201,0.918765,1.599132,0.960551,1.364587,1.677815,0.314669,1.364587,1.9088,0.816583,0.501517,1.433418,0.914201,0.918765,1.599132,0.298608,0.918765,1.819285,0.264782,0.501517,1.630757,0.298608,0.918765,1.819285,-0.35494,0.918765,1.820187,-0.48845,0.018322,0.163051,-0.893553,0.046802,0.306443,-0.950246,0.046802,0,-0.272969,0.018322,0.416733,-0.48857,0.046802,0.783222,-0.733771,0.046802,0.581257,-0.112959,0.018322,0.473781,-0.187842,0.046802,0.890439,-0.48857,0.046802,0.783222,-0.024063,0.013015,-0.020842,-0.112959,0.018322,0.473781,-0.272969,0.018322,0.416733,-0.017024,0.013015,-0.018332,-0.272969,0.018322,0.416733,-0.403434,0.018322,0.309273,-0.403434,0.018322,0.309273,-0.733771,0.046802,0.581257,-0.893553,0.046802,0.306443,-0.011285,0.013015,-0.013605,-0.403434,0.018322,0.309273,-0.48845,0.018322,0.163051,-0.007545,0.013015,-0.007173,-0.48845,0.018322,0.163051,-0.518616,0.018322,0,-1.016014,1.364587,1.679794,-1.541904,1.364587,1.246637,-0.969671,0.918765,1.601019,-0.708713,0.182362,1.15743,-0.872068,0.501517,1.435109,-1.321355,0.501517,1.065047,-0.264303,0.182362,1.315874,-0.32104,0.501517,1.631566,-0.872068,0.501517,1.435109,-0.187842,0.046802,0.890439,-0.264303,0.182362,1.315874,-0.708713,0.182362,1.15743,-0.48857,0.046802,0.783222,-0.708713,0.182362,1.15743,-1.071067,0.182362,0.858971,-0.35494,0.918765,1.820187,-0.371036,1.364587,1.909746,-1.016014,1.364587,1.679794,-0.32104,0.501517,1.631566,-0.35494,0.918765,1.820187,-0.969671,0.918765,1.601019,-0.872068,0.501517,1.435109,-0.969671,0.918765,1.601019,-1.470899,0.918765,1.188175,-1.307189,0.182362,0.452855,-1.614126,0.501517,0.561499,-1.718005,0.501517,0,-1.071067,0.182362,0.858971,-1.321355,0.501517,1.065047,-1.614126,0.501517,0.561499,-0.733771,0.046802,0.581257,-1.071067,0.182362,0.858971,-1.307189,0.182362,0.452855,-0.893553,0.046802,0.306443,-1.307189,0.182362,0.452855,-1.390969,0.182362,0,-1.470899,0.918765,1.188175,-1.541904,1.364587,1.246637,-1.884591,1.364587,0.657235,-1.321355,0.501517,1.065047,-1.470899,0.918765,1.188175,-1.797516,0.918765,0.626413,-1.614126,0.501517,0.561499,-1.797516,0.918765,0.626413,-1.913405,0.918765,0,-0.027809,2.437612,0,0.185321,2.639568,0.361803,0.29887,2.639568,0.268888,1.444597,1.867262,1.211932,1.269467,2.18124,1.067783,0.818551,2.18124,1.436759,1.895032,1.867262,0,1.666326,2.18124,0,1.562432,2.18124,0.567355,1.777113,1.867262,-0.643947,1.562432,2.18124,-0.567355,1.666326,2.18124,0,1.82924,1.364587,-0.662545,1.777113,1.867262,-0.643947,1.895032,1.867262,0,1.950565,1.364587,0,1.895032,1.867262,0,1.777113,1.867262,0.643947,1.777113,1.867262,0.643947,1.562432,2.18124,0.567355,1.269467,2.18124,1.067783,1.82924,1.364587,0.662545,1.777113,1.867262,0.643947,1.444597,1.867262,1.211932,1.487121,1.364587,1.246933,1.444597,1.867262,1.211932,0.932808,1.867262,1.630719,-0.027809,2.437612,0,0.372644,2.639568,0.142871,0.398807,2.639568,0,1.2627,2.450212,0,0.855407,2.629518,0,0.801243,2.629518,0.295783,1.183559,2.450212,-0.432183,0.801243,2.629518,-0.295783,0.855407,2.629518,0,1.562432,2.18124,-0.567355,1.183559,2.450212,-0.432183,1.2627,2.450212,0,1.666326,2.18124,0,1.2627,2.450212,0,1.183559,2.450212,0.432183,-0.027809,2.437612,0,0.398807,2.639568,0,0.372644,2.639568,-0.142871,0.801243,2.629518,-0.295783,0.372644,2.639568,-0.142871,0.398807,2.639568,0,0.855407,2.629518,0,0.398807,2.639568,0,0.372644,2.639568,0.142871,0.960392,2.450212,0.813384,0.648509,2.629518,0.556675,0.41343,2.629518,0.749036,1.183559,2.450212,0.432183,0.801243,2.629518,0.295783,0.648509,2.629518,0.556675,1.562432,2.18124,0.567355,1.183559,2.450212,0.432183,0.960392,2.450212,0.813384,1.269467,2.18124,1.067783,0.960392,2.450212,0.813384,0.616906,2.450212,1.094452,-0.027809,2.437612,0,0.29887,2.639568,0.268888,0.372644,2.639568,0.142871,0.801243,2.629518,0.295783,0.372644,2.639568,0.142871,0.29887,2.639568,0.268888,0.648509,2.629518,0.556675,0.29887,2.639568,0.268888,0.185321,2.639568,0.361803,-0.027809,2.437612,0,-0.101822,2.639568,0.411817,0.046043,2.639568,0.411613,0.305055,1.867262,1.85522,0.265464,2.18124,1.634557,-0.321724,2.18124,1.635368,0.932808,1.867262,1.630719,0.818551,2.18124,1.436759,0.265464,2.18124,1.634557,0.960551,1.364587,1.677815,0.932808,1.867262,1.630719,0.305055,1.867262,1.85522,0.314669,1.364587,1.9088,0.305055,1.867262,1.85522,-0.361402,1.867262,1.85614,0.195592,2.450212,1.245125,0.125085,2.629518,0.852156,-0.181038,2.629518,0.852578,0.616906,2.450212,1.094452,0.41343,2.629518,0.749036,0.125085,2.629518,0.852156,0.818551,2.18124,1.436759,0.616906,2.450212,1.094452,0.195592,2.450212,1.245125,0.265464,2.18124,1.634557,0.195592,2.450212,1.245125,-0.251699,2.450212,1.245743,-0.027809,2.437612,0,0.046043,2.639568,0.411613,0.185321,2.639568,0.361803,0.41343,2.629518,0.749036,0.185321,2.639568,0.361803,0.046043,2.639568,0.411613,0.125085,2.629518,0.852156,0.046043,2.639568,0.411613,-0.101822,2.639568,0.411817,-1.832472,1.867262,0.638786,-1.617822,2.18124,0.562808,-1.721944,2.18124,0,-0.988275,1.867262,1.632643,-0.874036,2.18124,1.438453,-1.324369,2.18124,1.067529,-0.361402,1.867262,1.85614,-0.321724,2.18124,1.635368,-0.874036,2.18124,1.438453,-0.371036,1.364587,1.909746,-0.361402,1.867262,1.85614,-0.988275,1.867262,1.632643,-1.016014,1.364587,1.679794,-0.988275,1.867262,1.632643,-1.499403,1.867262,1.211644,-1.499403,1.867262,1.211644,-1.324369,2.18124,1.067529,-1.617822,2.18124,0.562808,-1.541904,1.364587,1.246637,-1.499403,1.867262,1.211644,-1.832472,1.867262,0.638786,-1.884591,1.364587,0.657235,-1.832472,1.867262,0.638786,-1.95065,1.867262,0,-0.027809,2.437612,0,-0.354307,2.639568,0.268824,-0.240905,2.639568,0.36223,-0.672423,2.450212,1.095743,-0.468979,2.629518,0.74992,-0.703754,2.629518,0.556543,-0.251699,2.450212,1.245743,-0.181038,2.629518,0.852578,-0.468979,2.629518,0.74992,-0.321724,2.18124,1.635368,-0.251699,2.450212,1.245743,-0.672423,2.450212,1.095743,-0.874036,2.18124,1.438453,-0.672423,2.450212,1.095743,-1.015465,2.450212,0.813191,-0.027809,2.437612,0,-0.240905,2.639568,0.36223,-0.101822,2.639568,0.411817,-0.181038,2.629518,0.852578,-0.101822,2.639568,0.411817,-0.240905,2.639568,0.36223,-0.468979,2.629518,0.74992,-0.240905,2.639568,0.36223,-0.354307,2.639568,0.268824,-1.239003,2.450212,0.428719,-0.856742,2.629518,0.293413,-0.911025,2.629518,0,-1.015465,2.450212,0.813191,-0.703754,2.629518,0.556543,-0.856742,2.629518,0.293413,-1.324369,2.18124,1.067529,-1.015465,2.450212,0.813191,-1.239003,2.450212,0.428719,-1.617822,2.18124,0.562808,-1.239003,2.450212,0.428719,-1.318318,2.450212,0,-0.027809,2.437612,0,-0.428204,2.639568,0.141726,-0.354307,2.639568,0.268824,-0.703754,2.629518,0.556543,-0.354307,2.639568,0.268824,-0.428204,2.639568,0.141726,-0.856742,2.629518,0.293413,-0.428204,2.639568,0.141726,-0.454424,2.639568,0,1.82924,1.364587,-0.662545,1.742152,0.918765,-0.631474,1.416077,0.918765,-1.188457,-0.371036,1.364587,-1.909746,-0.35494,0.918765,-1.820187,-0.969671,0.918765,-1.601019,-0.187842,0.046802,-0.890439,-0.112959,0.018322,-0.473781,-0.272969,0.018322,-0.416733,-0.733771,0.046802,-0.581257,-0.403434,0.018322,-0.309273,-0.48845,0.018322,-0.163051,-0.893553,0.046802,-0.306443,-0.48845,0.018322,-0.163051,-0.518616,0.018322,0,-0.48845,0.018322,-0.163051,-0.007545,0.013015,0.007173,-0.006218,0.013015,0,-0.403434,0.018322,-0.309273,-0.011285,0.013015,0.013605,-0.007545,0.013015,0.007173,-0.48857,0.046802,-0.783222,-0.272969,0.018322,-0.416733,-0.403434,0.018322,-0.309273,-0.272969,0.018322,-0.416733,-0.017024,0.013015,0.018332,-0.011285,0.013015,0.013605,-0.112959,0.018322,-0.473781,-0.024063,0.013015,0.020842,-0.017024,0.013015,0.018332,-1.541904,1.364587,-1.246637,-1.470899,0.918765,-1.188175,-1.797516,0.918765,-0.626413,-1.321355,0.501517,-1.065047,-1.071067,0.182362,-0.858971,-1.307189,0.182362,-0.452855,-1.614126,0.501517,-0.561499,-1.307189,0.182362,-0.452855,-1.390969,0.182362,0,-1.307189,0.182362,-0.452855,-0.893553,0.046802,-0.306443,-0.950246,0.046802,0,-1.071067,0.182362,-0.858971,-0.733771,0.046802,-0.581257,-0.893553,0.046802,-0.306443,-1.884591,1.364587,-0.657235,-1.797516,0.918765,-0.626413,-1.913405,0.918765,0,-1.797516,0.918765,-0.626413,-1.614126,0.501517,-0.561499,-1.718005,0.501517,0,-1.470899,0.918765,-1.188175,-1.321355,0.501517,-1.065047,-1.614126,0.501517,-0.561499,-0.32104,0.501517,-1.631566,-0.264303,0.182362,-1.315874,-0.708713,0.182362,-1.15743,-0.872068,0.501517,-1.435109,-0.708713,0.182362,-1.15743,-1.071067,0.182362,-0.858971,-0.708713,0.182362,-1.15743,-0.48857,0.046802,-0.783222,-0.733771,0.046802,-0.581257,-0.264303,0.182362,-1.315874,-0.187842,0.046802,-0.890439,-0.48857,0.046802,-0.783222,-1.016014,1.364587,-1.679794,-0.969671,0.918765,-1.601019,-1.470899,0.918765,-1.188175,-0.969671,0.918765,-1.601019,-0.872068,0.501517,-1.435109,-1.321355,0.501517,-1.065047,-0.35494,0.918765,-1.820187,-0.32104,0.501517,-1.631566,-0.872068,0.501517,-1.435109,0.838059,0.046802,-0.308918,0.432899,0.018322,-0.164368,0.348024,0.018322,-0.309347,0.433024,0.046802,-0.782299,0.217389,0.018322,-0.416242,0.057155,0.018322,-0.473546,0.131875,0.046802,-0.889998,0.057155,0.018322,-0.473546,-0.112959,0.018322,-0.473781,0.057155,0.018322,-0.473546,-0.031546,0.013015,0.020832,-0.024063,0.013015,0.020842,0.217389,0.018322,-0.416242,-0.038595,0.013015,0.018311,-0.031546,0.013015,0.020832,0.678543,0.046802,-0.581396,0.348024,0.018322,-0.309347,0.217389,0.018322,-0.416242,0.348024,0.018322,-0.309347,-0.044342,0.013015,0.013608,-0.038595,0.013015,0.018311,0.432899,0.018322,-0.164368,-0.048076,0.013015,0.007231,-0.044342,0.013015,0.013608,0.960551,1.364587,-1.677815,0.914201,0.918765,-1.599132,0.298608,0.918765,-1.819285,0.816583,0.501517,-1.433418,0.653202,0.182362,-1.156066,0.208169,0.182362,-1.315222,0.264782,0.501517,-1.630757,0.208169,0.182362,-1.315222,-0.264303,0.182362,-1.315874,0.208169,0.182362,-1.315222,0.131875,0.046802,-0.889998,-0.187842,0.046802,-0.890439,0.653202,0.182362,-1.156066,0.433024,0.046802,-0.782299,0.131875,0.046802,-0.889998,0.314669,1.364587,-1.9088,0.298608,0.918765,-1.819285,-0.35494,0.918765,-1.820187,0.298608,0.918765,-1.819285,0.264782,0.501517,-1.630757,-0.32104,0.501517,-1.631566,0.914201,0.918765,-1.599132,0.816583,0.501517,-1.433418,0.264782,0.501517,-1.630757,1.558735,0.501517,-0.566036,1.251755,0.182362,-0.456514,1.016024,0.182362,-0.859175,1.266451,0.501517,-1.0653,1.016024,0.182362,-0.859175,0.653202,0.182362,-1.156066,1.016024,0.182362,-0.859175,0.678543,0.046802,-0.581396,0.433024,0.046802,-0.782299,1.251755,0.182362,-0.456514,0.838059,0.046802,-0.308918,0.678543,0.046802,-0.581396,1.487121,1.364587,-1.246933,1.416077,0.918765,-1.188457,0.914201,0.918765,-1.599132,1.416077,0.918765,-1.188457,1.266451,0.501517,-1.0653,0.816583,0.501517,-1.433418,1.742152,0.918765,-0.631474,1.558735,0.501517,-0.566036,1.266451,0.501517,-1.0653,-0.321724,2.18124,-1.635368,-0.361402,1.867262,-1.85614,-0.988275,1.867262,-1.632643,-1.324369,2.18124,-1.067529,-1.499403,1.867262,-1.211644,-1.832472,1.867262,-0.638786,-1.617822,2.18124,-0.562808,-1.832472,1.867262,-0.638786,-1.95065,1.867262,0,-1.832472,1.867262,-0.638786,-1.884591,1.364587,-0.657235,-2.006183,1.364587,0,-1.499403,1.867262,-1.211644,-1.541904,1.364587,-1.246637,-1.884591,1.364587,-0.657235,-0.874036,2.18124,-1.438453,-0.988275,1.867262,-1.632643,-1.499403,1.867262,-1.211644,-0.988275,1.867262,-1.632643,-1.016014,1.364587,-1.679794,-1.541904,1.364587,-1.246637,-0.361402,1.867262,-1.85614,-0.371036,1.364587,-1.909746,-1.016014,1.364587,-1.679794,-0.703754,2.629518,-0.556543,-1.015465,2.450212,-0.813191,-1.239003,2.450212,-0.428719,-0.856742,2.629518,-0.293413,-1.239003,2.450212,-0.428719,-1.318318,2.450212,0,-1.239003,2.450212,-0.428719,-1.617822,2.18124,-0.562808,-1.721944,2.18124,0,-1.015465,2.450212,-0.813191,-1.324369,2.18124,-1.067529,-1.617822,2.18124,-0.562808,-0.428204,2.639568,-0.141726,-0.856742,2.629518,-0.293413,-0.911025,2.629518,0,-0.354307,2.639568,-0.268824,-0.703754,2.629518,-0.556543,-0.856742,2.629518,-0.293413,-0.181038,2.629518,-0.852578,-0.251699,2.450212,-1.245743,-0.672423,2.450212,-1.095743,-0.468979,2.629518,-0.74992,-0.672423,2.450212,-1.095743,-1.015465,2.450212,-0.813191,-0.672423,2.450212,-1.095743,-0.874036,2.18124,-1.438453,-1.324369,2.18124,-1.067529,-0.251699,2.450212,-1.245743,-0.321724,2.18124,-1.635368,-0.874036,2.18124,-1.438453,-0.240905,2.639568,-0.36223,-0.468979,2.629518,-0.74992,-0.703754,2.629518,-0.556543,-0.101822,2.639568,-0.411817,-0.181038,2.629518,-0.852578,-0.468979,2.629518,-0.74992,1.562432,2.18124,-0.567355,1.777113,1.867262,-0.643947,1.444597,1.867262,-1.211932,0.818551,2.18124,-1.436759,0.932808,1.867262,-1.630719,0.305055,1.867262,-1.85522,0.265464,2.18124,-1.634557,0.305055,1.867262,-1.85522,-0.361402,1.867262,-1.85614,0.305055,1.867262,-1.85522,0.314669,1.364587,-1.9088,-0.371036,1.364587,-1.909746,0.932808,1.867262,-1.630719,0.960551,1.364587,-1.677815,0.314669,1.364587,-1.9088,1.269467,2.18124,-1.067783,1.444597,1.867262,-1.211932,0.932808,1.867262,-1.630719,1.444597,1.867262,-1.211932,1.487121,1.364587,-1.246933,0.960551,1.364587,-1.677815,1.777113,1.867262,-0.643947,1.82924,1.364587,-0.662545,1.487121,1.364587,-1.246933,0.41343,2.629518,-0.749036,0.616906,2.450212,-1.094452,0.195592,2.450212,-1.245125,0.125085,2.629518,-0.852156,0.195592,2.450212,-1.245125,-0.251699,2.450212,-1.245743,0.195592,2.450212,-1.245125,0.265464,2.18124,-1.634557,-0.321724,2.18124,-1.635368,0.616906,2.450212,-1.094452,0.818551,2.18124,-1.436759,0.265464,2.18124,-1.634557,0.046043,2.639568,-0.411613,0.125085,2.629518,-0.852156,-0.181038,2.629518,-0.852578,0.185321,2.639568,-0.361803,0.41343,2.629518,-0.749036,0.125085,2.629518,-0.852156,0.801243,2.629518,-0.295783,1.183559,2.450212,-0.432183,0.960392,2.450212,-0.813384,0.648509,2.629518,-0.556675,0.960392,2.450212,-0.813384,0.616906,2.450212,-1.094452,0.960392,2.450212,-0.813384,1.269467,2.18124,-1.067783,0.818551,2.18124,-1.436759,1.183559,2.450212,-0.432183,1.562432,2.18124,-0.567355,1.269467,2.18124,-1.067783,0.29887,2.639568,-0.268888,0.648509,2.629518,-0.556675,0.41343,2.629518,-0.749036,0.372644,2.639568,-0.142871,0.801243,2.629518,-0.295783,0.648509,2.629518,-0.556675,-2.006183,1.364587,0,-1.913405,0.918765,0,-1.797516,0.918765,0.626413,0.960551,1.364587,1.677815,0.914201,0.918765,1.599132,1.416077,0.918765,1.188457,0.433024,0.046802,0.782299,0.217389,0.018322,0.416242,0.348024,0.018322,0.309347,0.838059,0.046802,0.308918,0.432899,0.018322,0.164368,0.462998,0.018322,0,0.894628,0.046802,0,0.462998,0.018322,0,0.432899,0.018322,-0.164368,0.462998,0.018322,0,-0.0494,0.013015,0,-0.048076,0.013015,0.007231,0.432899,0.018322,0.164368,-0.048076,0.013015,-0.007231,-0.0494,0.013015,0,0.678543,0.046802,0.581396,0.348024,0.018322,0.309347,0.432899,0.018322,0.164368,0.348024,0.018322,0.309347,-0.044342,0.013015,-0.013608,-0.048076,0.013015,-0.007231,0.217389,0.018322,0.416242,-0.038595,0.013015,-0.018311,-0.044342,0.013015,-0.013608,1.82924,1.364587,0.662545,1.742152,0.918765,0.631474,1.857787,0.918765,0,1.558735,0.501517,0.566036,1.251755,0.182362,0.456514,1.335352,0.182362,0,1.662388,0.501517,0,1.335352,0.182362,0,1.251755,0.182362,-0.456514,1.335352,0.182362,0,0.894628,0.046802,0,0.838059,0.046802,-0.308918,1.251755,0.182362,0.456514,0.838059,0.046802,0.308918,0.894628,0.046802,0,1.950565,1.364587,0,1.857787,0.918765,0,1.742152,0.918765,-0.631474,1.857787,0.918765,0,1.662388,0.501517,0,1.558735,0.501517,-0.566036,1.742152,0.918765,0.631474,1.558735,0.501517,0.566036,1.662388,0.501517,0,0.816583,0.501517,1.433418,0.653202,0.182362,1.156066,1.016024,0.182362,0.859175,1.266451,0.501517,1.0653,1.016024,0.182362,0.859175,1.251755,0.182362,0.456514,1.016024,0.182362,0.859175,0.678543,0.046802,0.581396,0.838059,0.046802,0.308918,0.653202,0.182362,1.156066,0.433024,0.046802,0.782299,0.678543,0.046802,0.581396,1.487121,1.364587,1.246933,1.416077,0.918765,1.188457,1.742152,0.918765,0.631474,1.416077,0.918765,1.188457,1.266451,0.501517,1.0653,1.558735,0.501517,0.566036,0.914201,0.918765,1.599132,0.816583,0.501517,1.433418,1.266451,0.501517,1.0653,-0.371036,1.364587,1.909746,-0.35494,0.918765,1.820187,0.298608,0.918765,1.819285,-0.187842,0.046802,0.890439,-0.112959,0.018322,0.473781,0.057155,0.018322,0.473546,0.131875,0.046802,0.889998,0.057155,0.018322,0.473546,0.217389,0.018322,0.416242,0.057155,0.018322,0.473546,-0.031546,0.013015,-0.020832,-0.038595,0.013015,-0.018311,-0.112959,0.018322,0.473781,-0.024063,0.013015,-0.020842,-0.031546,0.013015,-0.020832,-0.32104,0.501517,1.631566,-0.264303,0.182362,1.315874,0.208169,0.182362,1.315222,0.264782,0.501517,1.630757,0.208169,0.182362,1.315222,0.653202,0.182362,1.156066,0.208169,0.182362,1.315222,0.131875,0.046802,0.889998,0.433024,0.046802,0.782299,-0.264303,0.182362,1.315874,-0.187842,0.046802,0.890439,0.131875,0.046802,0.889998,0.314669,1.364587,1.9088,0.298608,0.918765,1.819285,0.914201,0.918765,1.599132,0.298608,0.918765,1.819285,0.264782,0.501517,1.630757,0.816583,0.501517,1.433418,-0.35494,0.918765,1.820187,-0.32104,0.501517,1.631566,0.264782,0.501517,1.630757,-0.950246,0.046802,0,-0.518616,0.018322,0,-0.48845,0.018322,0.163051,-0.733771,0.046802,0.581257,-0.403434,0.018322,0.309273,-0.272969,0.018322,0.416733,-0.48857,0.046802,0.783222,-0.272969,0.018322,0.416733,-0.112959,0.018322,0.473781,-0.272969,0.018322,0.416733,-0.017024,0.013015,-0.018332,-0.024063,0.013015,-0.020842,-0.403434,0.018322,0.309273,-0.011285,0.013015,-0.013605,-0.017024,0.013015,-0.018332,-0.893553,0.046802,0.306443,-0.48845,0.018322,0.163051,-0.403434,0.018322,0.309273,-0.48845,0.018322,0.163051,-0.007545,0.013015,-0.007173,-0.011285,0.013015,-0.013605,-0.518616,0.018322,0,-0.006218,0.013015,0,-0.007545,0.013015,-0.007173,-1.541904,1.364587,1.246637,-1.470899,0.918765,1.188175,-0.969671,0.918765,1.601019,-1.321355,0.501517,1.065047,-1.071067,0.182362,0.858971,-0.708713,0.182362,1.15743,-0.872068,0.501517,1.435109,-0.708713,0.182362,1.15743,-0.264303,0.182362,1.315874,-0.708713,0.182362,1.15743,-0.48857,0.046802,0.783222,-0.187842,0.046802,0.890439,-1.071067,0.182362,0.858971,-0.733771,0.046802,0.581257,-0.48857,0.046802,0.783222,-1.016014,1.364587,1.679794,-0.969671,0.918765,1.601019,-0.35494,0.918765,1.820187,-0.969671,0.918765,1.601019,-0.872068,0.501517,1.435109,-0.32104,0.501517,1.631566,-1.470899,0.918765,1.188175,-1.321355,0.501517,1.065047,-0.872068,0.501517,1.435109,-1.718005,0.501517,0,-1.390969,0.182362,0,-1.307189,0.182362,0.452855,-1.614126,0.501517,0.561499,-1.307189,0.182362,0.452855,-1.071067,0.182362,0.858971,-1.307189,0.182362,0.452855,-0.893553,0.046802,0.306443,-0.733771,0.046802,0.581257,-1.390969,0.182362,0,-0.950246,0.046802,0,-0.893553,0.046802,0.306443,-1.884591,1.364587,0.657235,-1.797516,0.918765,0.626413,-1.470899,0.918765,1.188175,-1.797516,0.918765,0.626413,-1.614126,0.501517,0.561499,-1.321355,0.501517,1.065047,-1.913405,0.918765,0,-1.718005,0.501517,0,-1.614126,0.501517,0.561499,0.818551,2.18124,1.436759,0.932808,1.867262,1.630719,1.444597,1.867262,1.211932,1.562432,2.18124,0.567355,1.777113,1.867262,0.643947,1.895032,1.867262,0,1.666326,2.18124,0,1.895032,1.867262,0,1.777113,1.867262,-0.643947,1.895032,1.867262,0,1.950565,1.364587,0,1.82924,1.364587,-0.662545,1.777113,1.867262,0.643947,1.82924,1.364587,0.662545,1.950565,1.364587,0,1.269467,2.18124,1.067783,1.444597,1.867262,1.211932,1.777113,1.867262,0.643947,1.444597,1.867262,1.211932,1.487121,1.364587,1.246933,1.82924,1.364587,0.662545,0.932808,1.867262,1.630719,0.960551,1.364587,1.677815,1.487121,1.364587,1.246933,0.801243,2.629518,0.295783,1.183559,2.450212,0.432183,1.2627,2.450212,0,0.855407,2.629518,0,1.2627,2.450212,0,1.183559,2.450212,-0.432183,1.2627,2.450212,0,1.666326,2.18124,0,1.562432,2.18124,-0.567355,1.183559,2.450212,0.432183,1.562432,2.18124,0.567355,1.666326,2.18124,0,0.398807,2.639568,0,0.855407,2.629518,0,0.801243,2.629518,-0.295783,0.372644,2.639568,0.142871,0.801243,2.629518,0.295783,0.855407,2.629518,0,0.41343,2.629518,0.749036,0.616906,2.450212,1.094452,0.960392,2.450212,0.813384,0.648509,2.629518,0.556675,0.960392,2.450212,0.813384,1.183559,2.450212,0.432183,0.960392,2.450212,0.813384,1.269467,2.18124,1.067783,1.562432,2.18124,0.567355,0.616906,2.450212,1.094452,0.818551,2.18124,1.436759,1.269467,2.18124,1.067783,0.29887,2.639568,0.268888,0.648509,2.629518,0.556675,0.801243,2.629518,0.295783,0.185321,2.639568,0.361803,0.41343,2.629518,0.749036,0.648509,2.629518,0.556675,-0.321724,2.18124,1.635368,-0.361402,1.867262,1.85614,0.305055,1.867262,1.85522,0.265464,2.18124,1.634557,0.305055,1.867262,1.85522,0.932808,1.867262,1.630719,0.305055,1.867262,1.85522,0.314669,1.364587,1.9088,0.960551,1.364587,1.677815,-0.361402,1.867262,1.85614,-0.371036,1.364587,1.909746,0.314669,1.364587,1.9088,-0.181038,2.629518,0.852578,-0.251699,2.450212,1.245743,0.195592,2.450212,1.245125,0.125085,2.629518,0.852156,0.195592,2.450212,1.245125,0.616906,2.450212,1.094452,0.195592,2.450212,1.245125,0.265464,2.18124,1.634557,0.818551,2.18124,1.436759,-0.251699,2.450212,1.245743,-0.321724,2.18124,1.635368,0.265464,2.18124,1.634557,0.046043,2.639568,0.411613,0.125085,2.629518,0.852156,0.41343,2.629518,0.749036,-0.101822,2.639568,0.411817,-0.181038,2.629518,0.852578,0.125085,2.629518,0.852156,-1.721944,2.18124,0,-1.95065,1.867262,0,-1.832472,1.867262,0.638786,-1.324369,2.18124,1.067529,-1.499403,1.867262,1.211644,-0.988275,1.867262,1.632643,-0.874036,2.18124,1.438453,-0.988275,1.867262,1.632643,-0.361402,1.867262,1.85614,-0.988275,1.867262,1.632643,-1.016014,1.364587,1.679794,-0.371036,1.364587,1.909746,-1.499403,1.867262,1.211644,-1.541904,1.364587,1.246637,-1.016014,1.364587,1.679794,-1.617822,2.18124,0.562808,-1.832472,1.867262,0.638786,-1.499403,1.867262,1.211644,-1.832472,1.867262,0.638786,-1.884591,1.364587,0.657235,-1.541904,1.364587,1.246637,-1.95065,1.867262,0,-2.006183,1.364587,0,-1.884591,1.364587,0.657235,-0.703754,2.629518,0.556543,-1.015465,2.450212,0.813191,-0.672423,2.450212,1.095743,-0.468979,2.629518,0.74992,-0.672423,2.450212,1.095743,-0.251699,2.450212,1.245743,-0.672423,2.450212,1.095743,-0.874036,2.18124,1.438453,-0.321724,2.18124,1.635368,-1.015465,2.450212,0.813191,-1.324369,2.18124,1.067529,-0.874036,2.18124,1.438453,-0.240905,2.639568,0.36223,-0.468979,2.629518,0.74992,-0.181038,2.629518,0.852578,-0.354307,2.639568,0.268824,-0.703754,2.629518,0.556543,-0.468979,2.629518,0.74992,-0.911025,2.629518,0,-1.318318,2.450212,0,-1.239003,2.450212,0.428719,-0.856742,2.629518,0.293413,-1.239003,2.450212,0.428719,-1.015465,2.450212,0.813191,-1.239003,2.450212,0.428719,-1.617822,2.18124,0.562808,-1.324369,2.18124,1.067529,-1.318318,2.450212,0,-1.721944,2.18124,0,-1.617822,2.18124,0.562808,-0.428204,2.639568,0.141726,-0.856742,2.629518,0.293413,-0.703754,2.629518,0.556543,-0.454424,2.639568,0,-0.911025,2.629518,0,-0.856742,2.629518,0.293413]);
    mainGeom.addAttribute('position', new THREE.BufferAttribute(vertices,3));
    this.mainTomato = new THREE.Mesh(mainGeom, tomato);
    
//Leaves
    var leaf1Geom = new THREE.BufferGeometry();
    var vertices = new Float32Array([-0.004418,2.094427,-0.02907,0.040012,2.338882,-0.004089,0.132808,2.591332,0.059019,-0.004418,2.094427,-0.02907,0.132808,2.591332,0.059019,0.152453,2.507129,0.191615,0.528892,3.476965,0.88523,0.501809,3.373633,0.611124,-0.165971,3.505907,0.794055,0.528892,3.476965,0.88523,-0.165971,3.505907,0.794055,-0.138888,3.609239,1.068162,-0.435382,2.623568,0.352646,-0.443918,2.66341,0.133878,-0.536715,2.41096,0.07077,-0.435382,2.623568,0.352646,-0.536715,2.41096,0.07077,-0.592253,2.210866,0.131961,-0.592253,2.210866,0.131961,-0.536715,2.41096,0.07077,0.040012,2.338882,-0.004089,-0.592253,2.210866,0.131961,0.040012,2.338882,-0.004089,-0.004418,2.094427,-0.02907,0.040012,2.338882,-0.004089,-0.536715,2.41096,0.07077,-0.443918,2.66341,0.133878,0.040012,2.338882,-0.004089,-0.443918,2.66341,0.133878,0.132808,2.591332,0.059019,-0.592253,2.210866,0.131961,-0.004418,2.094427,-0.02907,0.152453,2.507129,0.191615,-0.592253,2.210866,0.131961,0.152453,2.507129,0.191615,-0.435382,2.623568,0.352646,0.152453,2.507129,0.191615,0.132808,2.591332,0.059019,0.305607,2.921134,0.260049,0.152453,2.507129,0.191615,0.305607,2.921134,0.260049,0.328394,2.823458,0.41386,0.132808,2.591332,0.059019,-0.443918,2.66341,0.133878,-0.376282,3.056203,0.446845,0.132808,2.591332,0.059019,-0.376282,3.056203,0.446845,0.305607,2.921134,0.260049,-0.443918,2.66341,0.133878,-0.435382,2.623568,0.352646,-0.353495,2.958527,0.600655,-0.443918,2.66341,0.133878,-0.353495,2.958527,0.600655,-0.376282,3.056203,0.446845,-0.435382,2.623568,0.352646,0.152453,2.507129,0.191615,0.328394,2.823458,0.41386,-0.435382,2.623568,0.352646,0.328394,2.823458,0.41386,-0.353495,2.958527,0.600655,0.328394,2.823458,0.41386,0.305607,2.921134,0.260049,0.395061,3.203834,0.455745,0.328394,2.823458,0.41386,0.395061,3.203834,0.455745,0.445088,3.172644,0.616049,0.305607,2.921134,0.260049,-0.376282,3.056203,0.446845,-0.27272,3.336109,0.638676,0.305607,2.921134,0.260049,-0.27272,3.336109,0.638676,0.395061,3.203834,0.455745,-0.376282,3.056203,0.446845,-0.353495,2.958527,0.600655,-0.222692,3.304918,0.79898,-0.376282,3.056203,0.446845,-0.222692,3.304918,0.79898,-0.27272,3.336109,0.638676,-0.353495,2.958527,0.600655,0.328394,2.823458,0.41386,0.445088,3.172644,0.616049,-0.353495,2.958527,0.600655,0.445088,3.172644,0.616049,-0.222692,3.304918,0.79898,0.445088,3.172644,0.616049,0.395061,3.203834,0.455745,0.501809,3.373633,0.611124,0.445088,3.172644,0.616049,0.501809,3.373633,0.611124,0.528892,3.476965,0.88523,0.395061,3.203834,0.455745,-0.27272,3.336109,0.638676,-0.165971,3.505907,0.794055,0.395061,3.203834,0.455745,-0.165971,3.505907,0.794055,0.501809,3.373633,0.611124,-0.27272,3.336109,0.638676,-0.222692,3.304918,0.79898,-0.138888,3.609239,1.068162,-0.27272,3.336109,0.638676,-0.138888,3.609239,1.068162,-0.165971,3.505907,0.794055,-0.222692,3.304918,0.79898,0.445088,3.172644,0.616049,0.528892,3.476965,0.88523,-0.222692,3.304918,0.79898,0.528892,3.476965,0.88523,-0.138888,3.609239,1.068162]);
    leaf1Geom.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
    this.leaf1 = new THREE.Mesh(leaf1Geom, leaf);
    this.leaf1.rotation.y = Math.PI/3;
    
    var leaf2Geom = new THREE.BufferGeometry();
    var vertices = new Float32Array([-0.105194,2.471136,0.209178,-0.027663,2.572917,0.14814,0.012448,2.688918,0.095269,-0.105194,2.471136,0.209178,0.012448,2.688918,0.095269,-0.141057,2.652513,0.108242,-0.37642,3.066472,-0.150517,-0.182269,3.042952,-0.09112,-0.166844,2.87741,-0.373141,-0.37642,3.066472,-0.150517,-0.166844,2.87741,-0.373141,-0.360995,2.900929,-0.432538,-0.127479,2.506789,-0.140016,0.078529,2.537255,-0.124414,0.038418,2.421255,-0.071543,-0.127479,2.506789,-0.140016,0.038418,2.421255,-0.071543,-0.091615,2.325412,-0.039081,-0.091615,2.325412,-0.039081,0.038418,2.421255,-0.071543,-0.027663,2.572917,0.14814,-0.091615,2.325412,-0.039081,-0.027663,2.572917,0.14814,-0.105194,2.471136,0.209178,-0.027663,2.572917,0.14814,0.038418,2.421255,-0.071543,0.078529,2.537255,-0.124414,-0.027663,2.572917,0.14814,0.078529,2.537255,-0.124414,0.012448,2.688918,0.095269,-0.091615,2.325412,-0.039081,-0.105194,2.471136,0.209178,-0.141057,2.652513,0.108242,-0.091615,2.325412,-0.039081,-0.141057,2.652513,0.108242,-0.127479,2.506789,-0.140016,-0.141057,2.652513,0.108242,0.012448,2.688918,0.095269,-0.045445,2.845962,0.026683,-0.141057,2.652513,0.108242,-0.045445,2.845962,0.026683,-0.223511,2.803732,0.041732,0.012448,2.688918,0.095269,0.078529,2.537255,-0.124414,-0.029694,2.676922,-0.261296,0.012448,2.688918,0.095269,-0.029694,2.676922,-0.261296,-0.045445,2.845962,0.026683,0.078529,2.537255,-0.124414,-0.127479,2.506789,-0.140016,-0.20776,2.634692,-0.246247,0.078529,2.537255,-0.124414,-0.20776,2.634692,-0.246247,-0.029694,2.676922,-0.261296,-0.127479,2.506789,-0.140016,-0.141057,2.652513,0.108242,-0.223511,2.803732,0.041732,-0.127479,2.506789,-0.140016,-0.223511,2.803732,0.041732,-0.20776,2.634692,-0.246247,-0.223511,2.803732,0.041732,-0.045445,2.845962,0.026683,-0.105029,2.961118,-0.054463,-0.223511,2.803732,0.041732,-0.105029,2.961118,-0.054463,-0.264346,2.951118,-0.051029,-0.045445,2.845962,0.026683,-0.029694,2.676922,-0.261296,-0.089604,2.795575,-0.336485,-0.045445,2.845962,0.026683,-0.089604,2.795575,-0.336485,-0.105029,2.961118,-0.054463,-0.029694,2.676922,-0.261296,-0.20776,2.634692,-0.246247,-0.248921,2.785576,-0.33305,-0.029694,2.676922,-0.261296,-0.248921,2.785576,-0.33305,-0.089604,2.795575,-0.336485,-0.20776,2.634692,-0.246247,-0.223511,2.803732,0.041732,-0.264346,2.951118,-0.051029,-0.20776,2.634692,-0.246247,-0.264346,2.951118,-0.051029,-0.248921,2.785576,-0.33305,-0.264346,2.951118,-0.051029,-0.105029,2.961118,-0.054463,-0.182269,3.042952,-0.09112,-0.264346,2.951118,-0.051029,-0.182269,3.042952,-0.09112,-0.37642,3.066472,-0.150517,-0.105029,2.961118,-0.054463,-0.089604,2.795575,-0.336485,-0.166844,2.87741,-0.373141,-0.105029,2.961118,-0.054463,-0.166844,2.87741,-0.373141,-0.182269,3.042952,-0.09112,-0.089604,2.795575,-0.336485,-0.248921,2.785576,-0.33305,-0.360995,2.900929,-0.432538,-0.089604,2.795575,-0.336485,-0.360995,2.900929,-0.432538,-0.166844,2.87741,-0.373141,-0.248921,2.785576,-0.33305,-0.264346,2.951118,-0.051029,-0.37642,3.066472,-0.150517,-0.248921,2.785576,-0.33305,-0.37642,3.066472,-0.150517,-0.360995,2.900929,-0.432538]);
    leaf2Geom.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
    this.leaf2 = new THREE.Mesh(leaf1Geom, leaf);
    this.leaf2.rotation.y = -Math.PI/6;
    
    this.mesh.add(this.mainTomato);
    this.mesh.add(this.leaf1);
    this.mesh.add(this.leaf2);
    this.mesh.position.y += 20;
    this.mesh.scale.set(2,2,2);
    this.mesh.traverse(function(object) {
    if (object instanceof THREE.Mesh) {
      object.castShadow = true;
      object.receiveShadow = true;
    }
  });
}

Potato = function(){
  this.angle = 0;
  this.mesh = new THREE.Group();
  var potatoGeom = new THREE.BufferGeometry();
  var vertices = new Float32Array([0.296527,-0.354596,-1.196043,0.116352,-0.072587,-1.119071,0.17619,0.130378,-0.666636,0.296527,-0.354596,-1.196043,0.17619,0.130378,-0.666636,0.618241,-0.129467,-0.521557,0.116352,-0.072587,-1.119071,-0.157734,-0.151086,-1.143127,-0.370215,0.115003,-0.666636,0.116352,-0.072587,-1.119071,-0.370215,0.115003,-0.666636,0.17619,0.130378,-0.666636,-0.157734,-0.151086,-1.143127,-0.412952,-0.317516,-1.178673,-0.715254,-0.156162,-0.666636,-0.157734,-0.151086,-1.143127,-0.715254,-0.156162,-0.666636,-0.370215,0.115003,-0.666636,-0.412952,-0.317516,-1.178673,-0.510437,-0.535261,-1.188647,-0.884102,-0.509241,-0.672873,-0.412952,-0.317516,-1.178673,-0.884102,-0.509241,-0.672873,-0.715254,-0.156162,-0.666636,-0.510437,-0.535261,-1.188647,-0.49723,-0.761866,-1.157252,-0.715254,-0.981684,-0.666636,-0.510437,-0.535261,-1.188647,-0.715254,-0.981684,-0.666636,-0.884102,-0.509241,-0.672873,-0.49723,-0.761866,-1.157252,-0.208119,-0.836846,-1.119917,-0.273203,-1.261859,-0.666636,-0.49723,-0.761866,-1.157252,-0.273203,-1.261859,-0.666636,-0.715254,-0.981684,-0.666636,-0.208119,-0.836846,-1.119917,0.016904,-0.790803,-1.154271,0.273203,-1.261859,-0.666636,-0.208119,-0.836846,-1.119917,0.273203,-1.261859,-0.666636,-0.273203,-1.261859,-0.666636,0.016904,-0.790803,-1.154271,0.201106,-0.71208,-1.137004,0.618241,-1.036131,-0.666636,0.016904,-0.790803,-1.154271,0.618241,-1.036131,-0.666636,0.273203,-1.261859,-0.666636,0.201106,-0.71208,-1.137004,0.43892,-0.566673,-1.081508,0.829873,-0.582799,-0.531196,0.201106,-0.71208,-1.137004,0.829873,-0.582799,-0.531196,0.618241,-1.036131,-0.666636,0.43892,-0.566673,-1.081508,0.296527,-0.354596,-1.196043,0.618241,-0.129467,-0.521557,0.43892,-0.566673,-1.081508,0.618241,-0.129467,-0.521557,0.829873,-0.582799,-0.531196,0.618241,-0.129467,-0.521557,0.17619,0.130378,-0.666636,0.218455,0.214631,0.392431,0.618241,-0.129467,-0.521557,0.218455,0.214631,0.392431,0.689228,-0.1169,0.392431,0.17619,0.130378,-0.666636,-0.370215,0.115003,-0.666636,-0.41248,0.21988,0.310475,0.17619,0.130378,-0.666636,-0.41248,0.21988,0.310475,0.218455,0.214631,0.392431,-0.370215,0.115003,-0.666636,-0.715254,-0.156162,-0.666636,-0.825904,0.007527,0.392431,-0.370215,0.115003,-0.666636,-0.825904,0.007527,0.392431,-0.41248,0.21988,0.310475,-0.715254,-0.156162,-0.666636,-0.884102,-0.509241,-0.672873,-1.020873,-0.515935,0.392431,-0.715254,-0.156162,-0.666636,-1.020873,-0.515935,0.392431,-0.825904,0.007527,0.392431,-0.884102,-0.509241,-0.672873,-0.715254,-0.981684,-0.666636,-0.800773,-1.120347,0.404954,-0.884102,-0.509241,-0.672873,-0.800773,-1.120347,0.404954,-1.020873,-0.515935,0.392431,-0.715254,-0.981684,-0.666636,-0.273203,-1.261859,-0.666636,-0.315467,-1.296903,0.392431,-0.715254,-0.981684,-0.666636,-0.315467,-1.296903,0.392431,-0.800773,-1.120347,0.404954,-0.273203,-1.261859,-0.666636,0.273203,-1.261859,-0.666636,0.315467,-1.318876,0.258303,-0.273203,-1.261859,-0.666636,0.315467,-1.318876,0.258303,-0.315467,-1.296903,0.392431,0.273203,-1.261859,-0.666636,0.618241,-1.036131,-0.666636,0.728891,-0.999187,0.328691,0.273203,-1.261859,-0.666636,0.728891,-0.999187,0.328691,0.315467,-1.318876,0.258303,0.618241,-1.036131,-0.666636,0.829873,-0.582799,-0.531196,0.923861,-0.589493,0.392431,0.618241,-1.036131,-0.666636,0.923861,-0.589493,0.392431,0.728891,-0.999187,0.328691,0.829873,-0.582799,-0.531196,0.618241,-0.129467,-0.521557,0.689228,-0.1169,0.392431,0.829873,-0.582799,-0.531196,0.689228,-0.1169,0.392431,0.923861,-0.589493,0.392431,0.689228,-0.1169,0.392431,0.218455,0.214631,0.392431,0.273203,0.145154,1.059067,0.689228,-0.1169,0.392431,0.273203,0.145154,1.059067,0.715254,-0.081714,1.059067,0.218455,0.214631,0.392431,-0.41248,0.21988,0.310475,-0.273203,0.119974,1.059067,0.218455,0.214631,0.392431,-0.273203,0.119974,1.059067,0.273203,0.145154,1.059067,-0.41248,0.21988,0.310475,-0.825904,0.007527,0.392431,-0.715254,-0.081714,1.059067,-0.41248,0.21988,0.310475,-0.715254,-0.081714,1.059067,-0.273203,0.119974,1.059067,-0.825904,0.007527,0.392431,-1.020873,-0.515935,0.392431,-0.884102,-0.535046,1.059067,-0.825904,0.007527,0.392431,-0.884102,-0.535046,1.059067,-0.715254,-0.081714,1.059067,-1.020873,-0.515935,0.392431,-0.800773,-1.120347,0.404954,-0.715254,-0.988378,1.059067,-1.020873,-0.515935,0.392431,-0.715254,-0.988378,1.059067,-0.884102,-0.535046,1.059067,-0.800773,-1.120347,0.404954,-0.315467,-1.296903,0.392431,-0.273203,-1.268553,1.059067,-0.800773,-1.120347,0.404954,-0.273203,-1.268553,1.059067,-0.715254,-0.988378,1.059067,-0.315467,-1.296903,0.392431,0.315467,-1.318876,0.258303,0.273203,-1.268553,1.059067,-0.315467,-1.296903,0.392431,0.273203,-1.268553,1.059067,-0.273203,-1.268553,1.059067,0.315467,-1.318876,0.258303,0.728891,-0.999187,0.328691,0.715254,-0.988378,1.059067,0.315467,-1.318876,0.258303,0.715254,-0.988378,1.059067,0.273203,-1.268553,1.059067,0.728891,-0.999187,0.328691,0.923861,-0.589493,0.392431,0.7906,-0.535046,1.059067,0.728891,-0.999187,0.328691,0.7906,-0.535046,1.059067,0.715254,-0.988378,1.059067,0.923861,-0.589493,0.392431,0.689228,-0.1169,0.392431,0.715254,-0.081714,1.059067,0.923861,-0.589493,0.392431,0.715254,-0.081714,1.059067,0.7906,-0.535046,1.059067,0.715254,-0.081714,1.059067,0.273203,0.145154,1.059067,0.157734,-0.111556,1.547078,0.715254,-0.081714,1.059067,0.157734,-0.111556,1.547078,0.412952,-0.273315,1.547078,0.273203,0.145154,1.059067,-0.273203,0.119974,1.059067,-0.157734,-0.111556,1.547078,0.273203,0.145154,1.059067,-0.157734,-0.111556,1.547078,0.157734,-0.111556,1.547078,-0.273203,0.119974,1.059067,-0.715254,-0.081714,1.059067,-0.412952,-0.273315,1.547078,-0.273203,0.119974,1.059067,-0.412952,-0.273315,1.547078,-0.157734,-0.111556,1.547078,-0.715254,-0.081714,1.059067,-0.884102,-0.535046,1.059067,-0.510437,-0.535046,1.547078,-0.715254,-0.081714,1.059067,-0.510437,-0.535046,1.547078,-0.412952,-0.273315,1.547078,-0.884102,-0.535046,1.059067,-0.715254,-0.988378,1.059067,-0.412952,-0.796778,1.475098,-0.884102,-0.535046,1.059067,-0.412952,-0.796778,1.475098,-0.510437,-0.535046,1.547078,-0.715254,-0.988378,1.059067,-0.273203,-1.268553,1.059067,-0.158224,-0.858039,1.506513,-0.715254,-0.988378,1.059067,-0.158224,-0.858039,1.506513,-0.412952,-0.796778,1.475098,-0.273203,-1.268553,1.059067,0.273203,-1.268553,1.059067,0.128259,-0.854749,1.4434,-0.273203,-1.268553,1.059067,0.128259,-0.854749,1.4434,-0.158224,-0.858039,1.506513,0.273203,-1.268553,1.059067,0.715254,-0.988378,1.059067,0.229579,-0.776871,1.460564,0.273203,-1.268553,1.059067,0.229579,-0.776871,1.460564,0.128259,-0.854749,1.4434,0.715254,-0.988378,1.059067,0.7906,-0.535046,1.059067,0.378732,-0.548266,1.578273,0.715254,-0.988378,1.059067,0.378732,-0.548266,1.578273,0.229579,-0.776871,1.460564,0.7906,-0.535046,1.059067,0.715254,-0.081714,1.059067,0.412952,-0.273315,1.547078,0.7906,-0.535046,1.059067,0.412952,-0.273315,1.547078,0.378732,-0.548266,1.578273,0.116352,-0.072587,-1.119071,0.296527,-0.354596,-1.196043,0.011441,-0.520036,-1.235136,-0.157734,-0.151086,-1.143127,0.116352,-0.072587,-1.119071,0.011441,-0.520036,-1.235136,-0.412952,-0.317516,-1.178673,-0.157734,-0.151086,-1.143127,0.011441,-0.520036,-1.235136,-0.510437,-0.535261,-1.188647,-0.412952,-0.317516,-1.178673,0.011441,-0.520036,-1.235136,-0.49723,-0.761866,-1.157252,-0.510437,-0.535261,-1.188647,0.011441,-0.520036,-1.235136,-0.208119,-0.836846,-1.119917,-0.49723,-0.761866,-1.157252,0.011441,-0.520036,-1.235136,0.016904,-0.790803,-1.154271,-0.208119,-0.836846,-1.119917,0.011441,-0.520036,-1.235136,0.201106,-0.71208,-1.137004,0.016904,-0.790803,-1.154271,0.011441,-0.520036,-1.235136,0.43892,-0.566673,-1.081508,0.201106,-0.71208,-1.137004,0.011441,-0.520036,-1.235136,0.296527,-0.354596,-1.196043,0.43892,-0.566673,-1.081508,0.011441,-0.520036,-1.235136,0.412952,-0.273315,1.547078,0.157734,-0.111556,1.547078,0,-0.535046,1.641627,0.157734,-0.111556,1.547078,-0.157734,-0.111556,1.547078,0,-0.535046,1.641627,-0.157734,-0.111556,1.547078,-0.412952,-0.273315,1.547078,0,-0.535046,1.641627,-0.412952,-0.273315,1.547078,-0.510437,-0.535046,1.547078,0,-0.535046,1.641627,-0.510437,-0.535046,1.547078,-0.412952,-0.796778,1.475098,0,-0.535046,1.641627,-0.412952,-0.796778,1.475098,-0.158224,-0.858039,1.506513,0,-0.535046,1.641627,-0.158224,-0.858039,1.506513,0.128259,-0.854749,1.4434,0,-0.535046,1.641627,0.128259,-0.854749,1.4434,0.229579,-0.776871,1.460564,0,-0.535046,1.641627,0.229579,-0.776871,1.460564,0.378732,-0.548266,1.578273,0,-0.535046,1.641627,0.378732,-0.548266,1.578273,0.412952,-0.273315,1.547078,0,-0.535046,1.641627]);
  potatoGeom.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
  this.mainPotato = new THREE.Mesh(potatoGeom, potato);
  this.mesh.add(this.mainPotato);
  this.mesh.rotation.y = Math.PI/2;
  this.mesh.position.y += 20;    
  this.mesh.scale.set(4,4,4);
//  this.body.traverse(function(object) {
//    if (object instanceof THREE.Mesh) {
//      object.castShadow = true;
//      object.receiveShadow = true;
//    }
//  });
}
    
Hedgehog = function() {
  this.angle = 0;
  this.status="ready";
  this.mesh = new THREE.Group();
  var bodyGeom = new THREE.CubeGeometry(6,6,6,1);
  this.body = new THREE.Mesh(bodyGeom, blackMat);
  
  var headGeom = new THREE.CubeGeometry(5,5,7,1);
  this.head= new THREE.Mesh(headGeom, lightBrownMat);
  this.head.position.z = 6;
  this.head.position.y = -.5;
  
  
  var eyeGeom = new THREE.CubeGeometry(1,3,3);
  
  this.eyeL = new THREE.Mesh(eyeGeom, whiteMat);
  this.eyeL.position.x = 2.2;
  this.eyeL.position.z = -.5;
  this.eyeL.position.y = .8;
  this.eyeL.castShadow = true;
  this.head.add(this.eyeL);
  
  var irisGeom = new THREE.CubeGeometry(.5,1,1);
  
  this.iris = new THREE.Mesh(irisGeom, blackMat);
  this.iris.position.x = .5;
  this.iris.position.y = .8;
  this.iris.position.z = .8;
  this.eyeL.add(this.iris);
  
  this.eyeR = this.eyeL.clone();
  this.eyeR.children[0].position.x = -this.iris.position.x;
  this.eyeR.position.x = -this.eyeL.position.x;
  
  var spikeGeom = new THREE.CubeGeometry(.5,2,.5,1);
  spikeGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0,1,0));
  
  for (var i=0; i<9; i++){ 
    var row = (i%3);
    var col = Math.floor(i/3);
    var sb = new THREE.Mesh(spikeGeom, blackMat);
    sb.rotation.x =-Math.PI/2 + (Math.PI/12*row) -.5 +  Math.random();
    sb.position.z = -3;
    sb.position.y = -2 + row*2;
    sb.position.x = -2 + col*2; 
    this.body.add(sb); 
    var st = new THREE.Mesh(spikeGeom, blackMat);
    st.position.y = 3;
    st.position.x = -2 + row*2;
    st.position.z = -2 + col*2;
    st.rotation.z = Math.PI/6 - (Math.PI/6*row) -.5 +  Math.random();
    this.body.add(st);
    
    var sr = new THREE.Mesh(spikeGeom, blackMat);
    sr.position.x = 3;
    sr.position.y = -2 + row*2;
    sr.position.z = -2 + col*2;
    sr.rotation.z = -Math.PI/2 + (Math.PI/12*row) -.5 +  Math.random();
    this.body.add(sr);
    
    var sl = new THREE.Mesh(spikeGeom, blackMat);
    sl.position.x = -3;
    sl.position.y = -2 + row*2;
    sl.position.z = -2 + col*2;
    sl.rotation.z = Math.PI/2  - (Math.PI/12*row) -.5 +  Math.random();;
    this.body.add(sl); 
  }

  this.head.add(this.eyeR);
  var earGeom = new THREE.CubeGeometry(2, 2, .5, 1);
  this.earL = new THREE.Mesh(earGeom, lightBrownMat);
  this.earL.position.x = 2.5;
  this.earL.position.z = -2.5;
  this.earL.position.y = 2.5;
  this.earL.rotation.z = -Math.PI/12;
  this.earL.castShadow = true;
  this.head.add(this.earL);
  
  this.earR = this.earL.clone();
  this.earR.position.x = -this.earL.position.x;
  this.earR.rotation.z = -this.earL.rotation.z;
  this.earR.castShadow = true;
  this.head.add(this.earR);
  
//  var mouthGeom = new THREE.CubeGeometry( 1, 1,.5, 1);
//  this.mouth = new THREE.Mesh(mouthGeom, blackMat);
//  this.mouth.position.z = 3.5;
//  this.mouth.position.y = -1.5;
//  this.head.add(this.mouth);
  
  
  this.mesh.add(this.body);
  this.body.add(this.head);

  this.mesh.traverse(function(object) {
    if (object instanceof THREE.Mesh) {
      object.castShadow = true;
      object.receiveShadow = true;
    }
  });
}

Hedgehog.prototype.nod = function(){
  var _this = this;
  var speed = .1 + Math.random()*.5;
  var angle = -Math.PI/4 + Math.random()*Math.PI/2;
  TweenMax.to(this.head.rotation, speed, {y:angle, onComplete:function(){
    _this.nod();
  }});
}


function createHero() {
  hero = new Hero();
  hero.mesh.rotation.y = Math.PI/2;
  scene.add(hero.mesh);
  hero.nod();
}
    
function createTomato(){
  tomato = new Tomato();
  scene.add(tomato.mesh);   
}
    
function createPotato(){
  potato = new Potato();
  scene.add(potato.mesh);
}


function gameOver(){
  fieldGameOver.className = "show";
  gameStatus = "gameOver";
  //monster.sit();
  hero.hang();
  //monster.heroHolder.add(hero.mesh);
  TweenMax.to(this, 1, {speed:0});
  TweenMax.to(camera.position, 3, {z:cameraPosGameOver, y: 60, x:-30});
  carrot.mesh.visible = false;
  obstacle.mesh.visible = false;
  clearInterval(levelInterval);
}

function replay(){
  
  gameStatus = "preparingToReplay"
  
  fieldGameOver.className = "";
  
  TweenMax.killTweensOf(monster.pawFL.position);
  TweenMax.killTweensOf(monster.pawFR.position);
  TweenMax.killTweensOf(monster.pawBL.position);
  TweenMax.killTweensOf(monster.pawBR.position);
  
  TweenMax.killTweensOf(monster.pawFL.rotation);
  TweenMax.killTweensOf(monster.pawFR.rotation);
  TweenMax.killTweensOf(monster.pawBL.rotation);
  TweenMax.killTweensOf(monster.pawBR.rotation);
  
  TweenMax.killTweensOf(monster.head.rotation);
  TweenMax.killTweensOf(monster.eyeL.scale);
  TweenMax.killTweensOf(monster.eyeR.scale);
  
  //TweenMax.killTweensOf(hero.head.rotation);
  
    
  TweenMax.to(camera.position, 3, {z:cameraPosGame, x:0, y:30, ease:Power4.easeInOut});
  TweenMax.to(monster.torso.rotation,2, {x:0, ease:Power4.easeInOut});
  TweenMax.to(monster.torso.position,2, {y:0, ease:Power4.easeInOut});
  TweenMax.to(monster.pawFL.rotation,2, {x:0, ease:Power4.easeInOut});
  TweenMax.to(monster.pawFR.rotation,2, {x:0, ease:Power4.easeInOut});
 // TweenMax.to(monster.mouth.rotation,2, {x:.5, ease:Power4.easeInOut});
  
  
  TweenMax.to(monster.head.rotation,2, {y:0, x:-.3, ease:Power4.easeInOut});
  
  TweenMax.to(hero.mesh.position, 2, { x:20, ease:Power4.easeInOut});
  TweenMax.to(hero.head.rotation, 2, { x:0, y:0, ease:Power4.easeInOut});
 // TweenMax.to(monster.mouth.rotation, 2, {x:.2, ease:Power4.easeInOut});
//  TweenMax.to(monster.mouth.rotation, 1, {x:.4, ease:Power4.easeIn, delay: 1, onComplete:function(){
//    
//    resetGame();
//  }});
  
}

Fir = function() {
  var height = 200;
  var truncGeom = new THREE.CylinderGeometry(2,2,height, 6,1);
  truncGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0,height/2,0));
  this.mesh = new THREE.Mesh(truncGeom, greenMat);
  this.mesh.castShadow = true;
}

var firs = new THREE.Group();

function createFirs(){
  
  var nTrees = 1000;
   for(var i=0; i< nTrees; i++){
    var phi = i*(Math.PI*2)/nTrees;
    var theta = Math.PI/2;
    //theta += .25 + Math.random()*.3; 
    theta += (Math.random()>.05)? .25 + Math.random()*.3 : - .35 -  Math.random()*.1;
   
    var fir = new Tree();
    fir.mesh.position.x = Math.sin(theta)*Math.cos(phi)*floorRadius;
    fir.mesh.position.y = Math.sin(theta)*Math.sin(phi)*(floorRadius-10);
    fir.mesh.position.z = Math.cos(theta)*floorRadius; 
     
    var vec = fir.mesh.position.clone();
    var axis = new THREE.Vector3(0,1,0);
    fir.mesh.quaternion.setFromUnitVectors(axis, vec.clone().normalize());
    floor.add(fir.mesh); 
  }
}

function createCarrot(){
  carrot = new Carrot();
  scene.add(carrot.mesh);
}

function updateCarrotPosition(){
  carrot.mesh.rotation.y += delta * 6;
  carrot.mesh.rotation.z = Math.PI/2 - (floorRotation+carrot.angle);
  carrot.mesh.position.y = -floorRadius + Math.sin(floorRotation+carrot.angle) * (floorRadius+50);
  carrot.mesh.position.x = Math.cos(floorRotation+carrot.angle) * (floorRadius+50);
  
}

function updateTomatoPosition(){
  removeParticle(disappearMagic.mesh);
  tomato.mesh.rotation.y += delta *5;
  tomato.mesh.rotation.z = Math.PI/2 - (floorRotation+tomato.angle);
  tomato.mesh.position.y = -floorRadius + Math.sin(floorRotation+tomato.angle) * (floorRadius+40);
  tomato.mesh.position.x = Math.cos(floorRotation+tomato.angle) * (floorRadius+40);
}
    
function updatePotatoPosition(){
  removeParticle(disappearMagic.mesh);
 // potato.mesh.rotation.y += delta *5;
 // potato.mesh.rotation.z = Math.PI/2 - (floorRotation+tomato.angle);
  potato.mesh.position.y = -floorRadius + Math.sin(floorRotation+tomato.angle) * (floorRadius+40);
  potato.mesh.position.x = Math.cos(floorRotation+tomato.angle) * (floorRadius+150);
}

function updateObstaclePosition(){
  if (obstacle.status=="flying")return;
  
  // TODO fix this,
  if (floorRotation+obstacle.angle > 2.5 ){
    obstacle.angle = -floorRotation + Math.random()*.3;
    obstacle.body.rotation.y = Math.random() * Math.PI*2;
  }
  
  obstacle.mesh.rotation.z = floorRotation + obstacle.angle - Math.PI/2;
  obstacle.mesh.position.y = -floorRadius + Math.sin(floorRotation+obstacle.angle) * (floorRadius+3);
  obstacle.mesh.position.x = Math.cos(floorRotation+obstacle.angle) * (floorRadius+3);
  
}

function updateFloorRotation(){
  floorRotation += delta*.03 * speed;
  floorRotation = floorRotation%(Math.PI*2);
  floor.rotation.z = floorRotation;
}

function createObstacle(){
  obstacle = new Hedgehog();
  obstacle.body.rotation.y = -Math.PI/2;
  obstacle.mesh.scale.set(1.1,1.1,1.1);
  obstacle.mesh.position.y = floorRadius+4;
  obstacle.nod();
  scene.add(obstacle.mesh);
}

function createBonusParticles(){
  bonusParticles = new BonusParticles();
  bonusParticles.mesh.visible = false;
  scene.add(bonusParticles.mesh);
  
}

function createDisappearMagic(){
    disappearMagic = new DisappearMagic();
    disappearMagic.mesh.visible = false;
    scene.add(disappearMagic.mesh);
}


function checkCollision(){
  var db = hero.mesh.position.clone().sub(carrot.mesh.position.clone());
  var dm = hero.mesh.position.clone().sub(obstacle.mesh.position.clone());
  var tomatoPoint = hero.mesh.position.clone().sub(tomato.mesh.position.clone());
  var potatoPoint = hero.mesh.position.clone().sub(potato.mesh.position.clone());
    
  if (tomatoPoint.length() < collisionBonus ){
    //tomato.mesh.visible = false;  
    hitTomato();
   
  } 
  
  if (potatoPoint.length() < collisionBonus ){
    //tomato.mesh.visible = false;  
    hitPotato();
    randomizer = Math.random()*100;
     
   
  } 
    
  if(db.length() < collisionBonus){
    getBonus();
  }
  
  if(dm.length() < collisionObstacle && obstacle.status != "flying"){
    getMalus();
  }
}

function getBonus(){
  bonusParticles.mesh.position.copy(carrot.mesh.position);
  bonusParticles.mesh.visible = true;
  bonusParticles.explose();
  carrot.angle += Math.PI/2;
  //speed*=.95;
  monsterPosTarget += .025;
  
}

function hitTomato(){
  disappearMagic.mesh.position.copy(tomato.mesh.position);
  disappearMagic.mesh.visible = true;
  tomato.angle += Math.PI/2;
  //speed*=.95;
    console.log("Hit Tomato!")
}

function hitPotato(){
  disappearMagic.mesh.position.copy(tomato.mesh.position);
  disappearMagic.mesh.visible = true;
  potato.angle += Math.PI/2;
  //speed*=.95;
  console.log("Hit Potato!") 
}

function getMalus(){
  obstacle.status="flying";
  var tx = (Math.random()>.5)? -20-Math.random()*10 : 20+Math.random()*5;
  TweenMax.to(obstacle.mesh.position, 4, {x:tx, y:Math.random()*50, z:350, ease:Power4.easeOut});
  TweenMax.to(obstacle.mesh.rotation, 4, {x:Math.PI*3, z:Math.PI*3, y:Math.PI*6, ease:Power4.easeOut, onComplete:function(){
    obstacle.status = "ready";
    obstacle.body.rotation.y = Math.random() * Math.PI*2;
    obstacle.angle = -floorRotation - Math.random()*.4;
    
    obstacle.angle = obstacle.angle%(Math.PI*2);
    obstacle.mesh.rotation.x = 0;
    obstacle.mesh.rotation.y = 0;
    obstacle.mesh.rotation.z = 0;
    obstacle.mesh.position.z = 0;
    
  }});
  //
  monsterPosTarget -= .04;
  TweenMax.from(this, .5, {malusClearAlpha:.5, onUpdate:function(){
    renderer.setClearColor(malusClearColor, malusClearAlpha );
  }})
}

function updateDistance(){
  distance += delta*speed;
  var d = distance/2;
  fieldDistance.innerHTML = Math.floor(d);
}

function updateLevel(){
  if (speed >= maxSpeed) return;
  level++;
  speed += 2; 
}

function loop(){
  delta = clock.getDelta();
  updateFloorRotation();
  
  if (gameStatus == "play"){
    
//    if (hero.status == "running"){
//      hero.run();
//    }
    updateDistance();
    //updateMonsterPosition();
    updateCarrotPosition();
    updateTomatoPosition();
    updatePotatoPosition();
    updateObstaclePosition();
    checkCollision();
  }
  
  render();  
  requestAnimationFrame(loop);
}

function render(){
  renderer.render(scene, camera);
}

window.addEventListener('load', init, false);

function init(event){
  initScreenAnd3D();
  createLights();
  createFloor()
  createHero();
  createFirs();
  createTomato();
  createCarrot();
  createPotato();
  createBonusParticles();
  createDisappearMagic();
  createObstacle();
  initUI();
  resetGame();
  loop();
  
  //setInterval(hero.blink.bind(hero), 3000);
}

function resetGame(){
  scene.add(hero.mesh);
  hero.mesh.rotation.y = Math.PI/2;
  hero.mesh.position.y = 0;
  hero.mesh.position.z = 0;
  hero.mesh.position.x = 0;

  monsterPos = .56;
  monsterPosTarget = .65;
  speed = initSpeed;
  level = 0;
  distance = 0;
  carrot.mesh.visible = true;
  obstacle.mesh.visible = true;
  gameStatus = "play";
  hero.status = "running";
  hero.nod();
  audio.play();
  updateLevel();
  levelInterval = setInterval(updateLevel, levelUpdateFreq);
}

function initUI(){
  fieldDistance = document.getElementById("distValue");
  fieldGameOver = document.getElementById("gameoverInstructions");
  
}



////////////////////////////////////////////////
//                                        MODELS
////////////////////////////////////////////////

// TREE

Tree = function(){
	this.mesh = new THREE.Object3D();
	this.trunc = new Trunc();
	this.mesh.add(this.trunc.mesh);
}


Trunc = function(){
  var truncHeight = 5 + Math.random()*50;
  var topRadius = Math.random()*0.5;
  var bottomRadius = Math.random()*2;
  var mats = [blackMat, brownMat, pinkMat, whiteMat, greenMat, lightBrownMat, pinkMat];
  var matTrunc = greenMat;//mats[Math.floor(Math.random()*mats.length)];
  var nhSegments = 3;//Math.ceil(2 + Math.random()*6);
  var nvSegments = 3;//Math.ceil(2 + Math.random()*6);
  var geom = new THREE.CylinderGeometry(topRadius,bottomRadius,truncHeight, nhSegments, nvSegments);
  geom.applyMatrix(new THREE.Matrix4().makeTranslation(0,truncHeight/2,0));
  
  this.mesh = new THREE.Mesh(geom, matTrunc);
  
  for (var i=0; i<geom.vertices.length; i++){
    var noise = Math.random() ;
    var v = geom.vertices[i];
    v.x += -noise + Math.random()*noise*2;
    v.y += -noise + Math.random()*noise*2;
    v.z += -noise + Math.random()*noise*2;
    
    geom.computeVertexNormals();
    
//    // FRUITS
//    
//    if (Math.random()>.7){
//      var size = Math.random()*3;
//      var fruitGeometry = new THREE.CubeGeometry(size,size,size,1);
//      var matFruit = mats[Math.floor(Math.random()*mats.length)];
//      var fruit = new THREE.Mesh(fruitGeometry, matFruit);
//      fruit.position.x = v.x;
//      fruit.position.y = v.y+3;
//      fruit.position.z = v.z;
//      fruit.rotation.x = Math.random()*Math.PI;
//      fruit.rotation.y = Math.random()*Math.PI;
//      
//      this.mesh.add(fruit);
//    }
    
    // BRANCHES
    
    if (Math.random()>.5 && v.y > 10 && v.y < truncHeight - 10){
      var h = 1 + Math.random()*5;
      var thickness = .1 + Math.random()/2;
      
      var branchGeometry = new THREE.CylinderGeometry(thickness/2, thickness, h, 3, 1);
      branchGeometry.applyMatrix(new THREE.Matrix4().makeTranslation(0,h/2,0));
      var branch = new THREE.Mesh(branchGeometry, matTrunc);
      branch.position.x = v.x;
      branch.position.y = v.y;
      branch.position.z = v.z;
      
      var vec = new THREE.Vector3(v.x, 2, v.z);
      var axis = new THREE.Vector3(0,1,0);
      branch.quaternion.setFromUnitVectors(axis, vec.clone().normalize());
      
      
      this.mesh.add(branch);
    }
    
  }
  
  
  this.mesh.castShadow = true;
}
}

setTimeout(game(),10000);


